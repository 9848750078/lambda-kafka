"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  BadRequestException: () => BadRequestException,
  BatchAssociateScramSecretCommand: () => BatchAssociateScramSecretCommand,
  BatchDisassociateScramSecretCommand: () => BatchDisassociateScramSecretCommand,
  BrokerAZDistribution: () => BrokerAZDistribution,
  ClientBroker: () => ClientBroker,
  ClusterState: () => ClusterState,
  ClusterType: () => ClusterType,
  ConfigurationState: () => ConfigurationState,
  ConflictException: () => ConflictException,
  CreateClusterCommand: () => CreateClusterCommand,
  CreateClusterV2Command: () => CreateClusterV2Command,
  CreateConfigurationCommand: () => CreateConfigurationCommand,
  CreateReplicatorCommand: () => CreateReplicatorCommand,
  CreateVpcConnectionCommand: () => CreateVpcConnectionCommand,
  CustomerActionStatus: () => CustomerActionStatus,
  DeleteClusterCommand: () => DeleteClusterCommand,
  DeleteClusterPolicyCommand: () => DeleteClusterPolicyCommand,
  DeleteConfigurationCommand: () => DeleteConfigurationCommand,
  DeleteReplicatorCommand: () => DeleteReplicatorCommand,
  DeleteVpcConnectionCommand: () => DeleteVpcConnectionCommand,
  DescribeClusterCommand: () => DescribeClusterCommand,
  DescribeClusterOperationCommand: () => DescribeClusterOperationCommand,
  DescribeClusterOperationV2Command: () => DescribeClusterOperationV2Command,
  DescribeClusterV2Command: () => DescribeClusterV2Command,
  DescribeConfigurationCommand: () => DescribeConfigurationCommand,
  DescribeConfigurationRevisionCommand: () => DescribeConfigurationRevisionCommand,
  DescribeReplicatorCommand: () => DescribeReplicatorCommand,
  DescribeVpcConnectionCommand: () => DescribeVpcConnectionCommand,
  EnhancedMonitoring: () => EnhancedMonitoring,
  ForbiddenException: () => ForbiddenException,
  GetBootstrapBrokersCommand: () => GetBootstrapBrokersCommand,
  GetClusterPolicyCommand: () => GetClusterPolicyCommand,
  GetCompatibleKafkaVersionsCommand: () => GetCompatibleKafkaVersionsCommand,
  InternalServerErrorException: () => InternalServerErrorException,
  Kafka: () => Kafka,
  KafkaClient: () => KafkaClient,
  KafkaServiceException: () => KafkaServiceException,
  KafkaVersionStatus: () => KafkaVersionStatus,
  ListClientVpcConnectionsCommand: () => ListClientVpcConnectionsCommand,
  ListClusterOperationsCommand: () => ListClusterOperationsCommand,
  ListClusterOperationsV2Command: () => ListClusterOperationsV2Command,
  ListClustersCommand: () => ListClustersCommand,
  ListClustersV2Command: () => ListClustersV2Command,
  ListConfigurationRevisionsCommand: () => ListConfigurationRevisionsCommand,
  ListConfigurationsCommand: () => ListConfigurationsCommand,
  ListKafkaVersionsCommand: () => ListKafkaVersionsCommand,
  ListNodesCommand: () => ListNodesCommand,
  ListReplicatorsCommand: () => ListReplicatorsCommand,
  ListScramSecretsCommand: () => ListScramSecretsCommand,
  ListTagsForResourceCommand: () => ListTagsForResourceCommand,
  ListVpcConnectionsCommand: () => ListVpcConnectionsCommand,
  NodeType: () => NodeType,
  NotFoundException: () => NotFoundException,
  PutClusterPolicyCommand: () => PutClusterPolicyCommand,
  RebootBrokerCommand: () => RebootBrokerCommand,
  RejectClientVpcConnectionCommand: () => RejectClientVpcConnectionCommand,
  ReplicationStartingPositionType: () => ReplicationStartingPositionType,
  ReplicationTopicNameConfigurationType: () => ReplicationTopicNameConfigurationType,
  ReplicatorState: () => ReplicatorState,
  ServiceUnavailableException: () => ServiceUnavailableException,
  StorageMode: () => StorageMode,
  TagResourceCommand: () => TagResourceCommand,
  TargetCompressionType: () => TargetCompressionType,
  TooManyRequestsException: () => TooManyRequestsException,
  UnauthorizedException: () => UnauthorizedException,
  UntagResourceCommand: () => UntagResourceCommand,
  UpdateBrokerCountCommand: () => UpdateBrokerCountCommand,
  UpdateBrokerStorageCommand: () => UpdateBrokerStorageCommand,
  UpdateBrokerTypeCommand: () => UpdateBrokerTypeCommand,
  UpdateClusterConfigurationCommand: () => UpdateClusterConfigurationCommand,
  UpdateClusterKafkaVersionCommand: () => UpdateClusterKafkaVersionCommand,
  UpdateConfigurationCommand: () => UpdateConfigurationCommand,
  UpdateConnectivityCommand: () => UpdateConnectivityCommand,
  UpdateMonitoringCommand: () => UpdateMonitoringCommand,
  UpdateReplicationInfoCommand: () => UpdateReplicationInfoCommand,
  UpdateSecurityCommand: () => UpdateSecurityCommand,
  UpdateStorageCommand: () => UpdateStorageCommand,
  UserIdentityType: () => UserIdentityType,
  VpcConnectionState: () => VpcConnectionState,
  __Client: () => import_smithy_client.Client,
  paginateListClientVpcConnections: () => paginateListClientVpcConnections,
  paginateListClusterOperations: () => paginateListClusterOperations,
  paginateListClusterOperationsV2: () => paginateListClusterOperationsV2,
  paginateListClusters: () => paginateListClusters,
  paginateListClustersV2: () => paginateListClustersV2,
  paginateListConfigurationRevisions: () => paginateListConfigurationRevisions,
  paginateListConfigurations: () => paginateListConfigurations,
  paginateListKafkaVersions: () => paginateListKafkaVersions,
  paginateListNodes: () => paginateListNodes,
  paginateListReplicators: () => paginateListReplicators,
  paginateListScramSecrets: () => paginateListScramSecrets,
  paginateListVpcConnections: () => paginateListVpcConnections
});
module.exports = __toCommonJS(src_exports);

// src/KafkaClient.ts
var import_middleware_host_header = require("@aws-sdk/middleware-host-header");
var import_middleware_logger = require("@aws-sdk/middleware-logger");
var import_middleware_recursion_detection = require("@aws-sdk/middleware-recursion-detection");
var import_middleware_user_agent = require("@aws-sdk/middleware-user-agent");
var import_config_resolver = require("@smithy/config-resolver");
var import_core = require("@smithy/core");
var import_middleware_content_length = require("@smithy/middleware-content-length");
var import_middleware_endpoint = require("@smithy/middleware-endpoint");
var import_middleware_retry = require("@smithy/middleware-retry");

var import_httpAuthSchemeProvider = require("./auth/httpAuthSchemeProvider");

// src/endpoint/EndpointParameters.ts
var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
  return {
    ...options,
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "kafka"
  };
}, "resolveClientEndpointParameters");
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// src/KafkaClient.ts
var import_runtimeConfig = require("././runtimeConfig");

// src/runtimeExtensions.ts
var import_region_config_resolver = require("@aws-sdk/region-config-resolver");
var import_protocol_http = require("@smithy/protocol-http");
var import_smithy_client = require("@smithy/smithy-client");

// src/auth/httpAuthExtensionConfiguration.ts
var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
}, "getHttpAuthExtensionConfiguration");
var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
}, "resolveHttpAuthRuntimeConfig");

// src/runtimeExtensions.ts
var asPartial = /* @__PURE__ */ __name((t) => t, "asPartial");
var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
  const extensionConfiguration = {
    ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
    ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
  };
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return {
    ...runtimeConfig,
    ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
    ...(0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration),
    ...(0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
    ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
  };
}, "resolveRuntimeExtensions");

// src/KafkaClient.ts
var _KafkaClient = class _KafkaClient extends import_smithy_client.Client {
  constructor(...[configuration]) {
    const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_1);
    const _config_3 = (0, import_middleware_retry.resolveRetryConfig)(_config_2);
    const _config_4 = (0, import_config_resolver.resolveRegionConfig)(_config_3);
    const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
    const _config_6 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_5);
    const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
    const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
    super(_config_8);
    this.config = _config_8;
    this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
    this.middlewareStack.use(
      (0, import_core.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: import_httpAuthSchemeProvider.defaultKafkaHttpAuthSchemeParametersProvider,
        identityProviderConfigProvider: async (config) => new import_core.DefaultIdentityProviderConfig({
          "aws.auth#sigv4": config.credentials
        })
      })
    );
    this.middlewareStack.use((0, import_core.getHttpSigningPlugin)(this.config));
  }
  /**
   * Destroy underlying resources, like sockets. It's usually not necessary to do this.
   * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
   * Otherwise, sockets might stay open for quite a long time before the server terminates them.
   */
  destroy() {
    super.destroy();
  }
};
__name(_KafkaClient, "KafkaClient");
var KafkaClient = _KafkaClient;

// src/Kafka.ts


// src/commands/BatchAssociateScramSecretCommand.ts

var import_middleware_serde = require("@smithy/middleware-serde");


// src/protocols/Aws_restJson1.ts
var import_core2 = require("@aws-sdk/core");



// src/models/KafkaServiceException.ts

var _KafkaServiceException = class _KafkaServiceException extends import_smithy_client.ServiceException {
  /**
   * @internal
   */
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _KafkaServiceException.prototype);
  }
};
__name(_KafkaServiceException, "KafkaServiceException");
var KafkaServiceException = _KafkaServiceException;

// src/models/models_0.ts
var VpcConnectionState = {
  AVAILABLE: "AVAILABLE",
  CREATING: "CREATING",
  DEACTIVATING: "DEACTIVATING",
  DELETING: "DELETING",
  FAILED: "FAILED",
  INACTIVE: "INACTIVE",
  REJECTED: "REJECTED",
  REJECTING: "REJECTING"
};
var ClusterType = {
  PROVISIONED: "PROVISIONED",
  SERVERLESS: "SERVERLESS"
};
var BrokerAZDistribution = {
  DEFAULT: "DEFAULT"
};
var CustomerActionStatus = {
  ACTION_RECOMMENDED: "ACTION_RECOMMENDED",
  CRITICAL_ACTION_REQUIRED: "CRITICAL_ACTION_REQUIRED",
  NONE: "NONE"
};
var ClientBroker = {
  PLAINTEXT: "PLAINTEXT",
  TLS: "TLS",
  TLS_PLAINTEXT: "TLS_PLAINTEXT"
};
var EnhancedMonitoring = {
  DEFAULT: "DEFAULT",
  PER_BROKER: "PER_BROKER",
  PER_TOPIC_PER_BROKER: "PER_TOPIC_PER_BROKER",
  PER_TOPIC_PER_PARTITION: "PER_TOPIC_PER_PARTITION"
};
var StorageMode = {
  LOCAL: "LOCAL",
  TIERED: "TIERED"
};
var ClusterState = {
  ACTIVE: "ACTIVE",
  CREATING: "CREATING",
  DELETING: "DELETING",
  FAILED: "FAILED",
  HEALING: "HEALING",
  MAINTENANCE: "MAINTENANCE",
  REBOOTING_BROKER: "REBOOTING_BROKER",
  UPDATING: "UPDATING"
};
var UserIdentityType = {
  AWSACCOUNT: "AWSACCOUNT",
  AWSSERVICE: "AWSSERVICE"
};
var ConfigurationState = {
  ACTIVE: "ACTIVE",
  DELETE_FAILED: "DELETE_FAILED",
  DELETING: "DELETING"
};
var KafkaVersionStatus = {
  ACTIVE: "ACTIVE",
  DEPRECATED: "DEPRECATED"
};
var NodeType = {
  BROKER: "BROKER"
};
var TargetCompressionType = {
  GZIP: "GZIP",
  LZ4: "LZ4",
  NONE: "NONE",
  SNAPPY: "SNAPPY",
  ZSTD: "ZSTD"
};
var ReplicationStartingPositionType = {
  EARLIEST: "EARLIEST",
  LATEST: "LATEST"
};
var ReplicationTopicNameConfigurationType = {
  IDENTICAL: "IDENTICAL",
  PREFIXED_WITH_SOURCE_CLUSTER_ALIAS: "PREFIXED_WITH_SOURCE_CLUSTER_ALIAS"
};
var ReplicatorState = {
  CREATING: "CREATING",
  DELETING: "DELETING",
  FAILED: "FAILED",
  RUNNING: "RUNNING",
  UPDATING: "UPDATING"
};
var _BadRequestException = class _BadRequestException extends KafkaServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "BadRequestException",
      $fault: "client",
      ...opts
    });
    this.name = "BadRequestException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _BadRequestException.prototype);
    this.InvalidParameter = opts.InvalidParameter;
    this.Message = opts.Message;
  }
};
__name(_BadRequestException, "BadRequestException");
var BadRequestException = _BadRequestException;
var _ForbiddenException = class _ForbiddenException extends KafkaServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ForbiddenException",
      $fault: "client",
      ...opts
    });
    this.name = "ForbiddenException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ForbiddenException.prototype);
    this.InvalidParameter = opts.InvalidParameter;
    this.Message = opts.Message;
  }
};
__name(_ForbiddenException, "ForbiddenException");
var ForbiddenException = _ForbiddenException;
var _InternalServerErrorException = class _InternalServerErrorException extends KafkaServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InternalServerErrorException",
      $fault: "server",
      ...opts
    });
    this.name = "InternalServerErrorException";
    this.$fault = "server";
    Object.setPrototypeOf(this, _InternalServerErrorException.prototype);
    this.InvalidParameter = opts.InvalidParameter;
    this.Message = opts.Message;
  }
};
__name(_InternalServerErrorException, "InternalServerErrorException");
var InternalServerErrorException = _InternalServerErrorException;
var _NotFoundException = class _NotFoundException extends KafkaServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "NotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "NotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _NotFoundException.prototype);
    this.InvalidParameter = opts.InvalidParameter;
    this.Message = opts.Message;
  }
};
__name(_NotFoundException, "NotFoundException");
var NotFoundException = _NotFoundException;
var _ServiceUnavailableException = class _ServiceUnavailableException extends KafkaServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ServiceUnavailableException",
      $fault: "server",
      ...opts
    });
    this.name = "ServiceUnavailableException";
    this.$fault = "server";
    Object.setPrototypeOf(this, _ServiceUnavailableException.prototype);
    this.InvalidParameter = opts.InvalidParameter;
    this.Message = opts.Message;
  }
};
__name(_ServiceUnavailableException, "ServiceUnavailableException");
var ServiceUnavailableException = _ServiceUnavailableException;
var _TooManyRequestsException = class _TooManyRequestsException extends KafkaServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "TooManyRequestsException",
      $fault: "client",
      ...opts
    });
    this.name = "TooManyRequestsException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _TooManyRequestsException.prototype);
    this.InvalidParameter = opts.InvalidParameter;
    this.Message = opts.Message;
  }
};
__name(_TooManyRequestsException, "TooManyRequestsException");
var TooManyRequestsException = _TooManyRequestsException;
var _UnauthorizedException = class _UnauthorizedException extends KafkaServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "UnauthorizedException",
      $fault: "client",
      ...opts
    });
    this.name = "UnauthorizedException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _UnauthorizedException.prototype);
    this.InvalidParameter = opts.InvalidParameter;
    this.Message = opts.Message;
  }
};
__name(_UnauthorizedException, "UnauthorizedException");
var UnauthorizedException = _UnauthorizedException;
var _ConflictException = class _ConflictException extends KafkaServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ConflictException",
      $fault: "client",
      ...opts
    });
    this.name = "ConflictException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ConflictException.prototype);
    this.InvalidParameter = opts.InvalidParameter;
    this.Message = opts.Message;
  }
};
__name(_ConflictException, "ConflictException");
var ConflictException = _ConflictException;

// src/protocols/Aws_restJson1.ts
var se_BatchAssociateScramSecretCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/clusters/{ClusterArn}/scram-secrets");
  b.p("ClusterArn", () => input.ClusterArn, "{ClusterArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      secretArnList: [, (_) => (0, import_smithy_client._json)(_), `SecretArnList`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_BatchAssociateScramSecretCommand");
var se_BatchDisassociateScramSecretCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/clusters/{ClusterArn}/scram-secrets");
  b.p("ClusterArn", () => input.ClusterArn, "{ClusterArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      secretArnList: [, (_) => (0, import_smithy_client._json)(_), `SecretArnList`]
    })
  );
  b.m("PATCH").h(headers).b(body);
  return b.build();
}, "se_BatchDisassociateScramSecretCommand");
var se_CreateClusterCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/clusters");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      brokerNodeGroupInfo: [, (_) => se_BrokerNodeGroupInfo(_, context), `BrokerNodeGroupInfo`],
      clientAuthentication: [, (_) => se_ClientAuthentication(_, context), `ClientAuthentication`],
      clusterName: [, , `ClusterName`],
      configurationInfo: [, (_) => se_ConfigurationInfo(_, context), `ConfigurationInfo`],
      encryptionInfo: [, (_) => se_EncryptionInfo(_, context), `EncryptionInfo`],
      enhancedMonitoring: [, , `EnhancedMonitoring`],
      kafkaVersion: [, , `KafkaVersion`],
      loggingInfo: [, (_) => se_LoggingInfo(_, context), `LoggingInfo`],
      numberOfBrokerNodes: [, , `NumberOfBrokerNodes`],
      openMonitoring: [, (_) => se_OpenMonitoringInfo(_, context), `OpenMonitoring`],
      storageMode: [, , `StorageMode`],
      tags: [, (_) => (0, import_smithy_client._json)(_), `Tags`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateClusterCommand");
var se_CreateClusterV2Command = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/api/v2/clusters");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      clusterName: [, , `ClusterName`],
      provisioned: [, (_) => se_ProvisionedRequest(_, context), `Provisioned`],
      serverless: [, (_) => se_ServerlessRequest(_, context), `Serverless`],
      tags: [, (_) => (0, import_smithy_client._json)(_), `Tags`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateClusterV2Command");
var se_CreateConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/configurations");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      description: [, , `Description`],
      kafkaVersions: [, (_) => (0, import_smithy_client._json)(_), `KafkaVersions`],
      name: [, , `Name`],
      serverProperties: [, (_) => context.base64Encoder(_), `ServerProperties`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateConfigurationCommand");
var se_CreateReplicatorCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/replication/v1/replicators");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      description: [, , `Description`],
      kafkaClusters: [, (_) => se___listOfKafkaCluster(_, context), `KafkaClusters`],
      replicationInfoList: [, (_) => se___listOfReplicationInfo(_, context), `ReplicationInfoList`],
      replicatorName: [, , `ReplicatorName`],
      serviceExecutionRoleArn: [, , `ServiceExecutionRoleArn`],
      tags: [, (_) => (0, import_smithy_client._json)(_), `Tags`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateReplicatorCommand");
var se_CreateVpcConnectionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/vpc-connection");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      authentication: [, , `Authentication`],
      clientSubnets: [, (_) => (0, import_smithy_client._json)(_), `ClientSubnets`],
      securityGroups: [, (_) => (0, import_smithy_client._json)(_), `SecurityGroups`],
      tags: [, (_) => (0, import_smithy_client._json)(_), `Tags`],
      targetClusterArn: [, , `TargetClusterArn`],
      vpcId: [, , `VpcId`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateVpcConnectionCommand");
var se_DeleteClusterCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/clusters/{ClusterArn}");
  b.p("ClusterArn", () => input.ClusterArn, "{ClusterArn}", false);
  const query = (0, import_smithy_client.map)({
    [_cV]: [, input[_CV]]
  });
  let body;
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_DeleteClusterCommand");
var se_DeleteClusterPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/clusters/{ClusterArn}/policy");
  b.p("ClusterArn", () => input.ClusterArn, "{ClusterArn}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteClusterPolicyCommand");
var se_DeleteConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/configurations/{Arn}");
  b.p("Arn", () => input.Arn, "{Arn}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteConfigurationCommand");
var se_DeleteReplicatorCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/replication/v1/replicators/{ReplicatorArn}");
  b.p("ReplicatorArn", () => input.ReplicatorArn, "{ReplicatorArn}", false);
  const query = (0, import_smithy_client.map)({
    [_cV]: [, input[_CV]]
  });
  let body;
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_DeleteReplicatorCommand");
var se_DeleteVpcConnectionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/vpc-connection/{Arn}");
  b.p("Arn", () => input.Arn, "{Arn}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteVpcConnectionCommand");
var se_DescribeClusterCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/clusters/{ClusterArn}");
  b.p("ClusterArn", () => input.ClusterArn, "{ClusterArn}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeClusterCommand");
var se_DescribeClusterOperationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/operations/{ClusterOperationArn}");
  b.p("ClusterOperationArn", () => input.ClusterOperationArn, "{ClusterOperationArn}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeClusterOperationCommand");
var se_DescribeClusterOperationV2Command = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/api/v2/operations/{ClusterOperationArn}");
  b.p("ClusterOperationArn", () => input.ClusterOperationArn, "{ClusterOperationArn}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeClusterOperationV2Command");
var se_DescribeClusterV2Command = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/api/v2/clusters/{ClusterArn}");
  b.p("ClusterArn", () => input.ClusterArn, "{ClusterArn}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeClusterV2Command");
var se_DescribeConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/configurations/{Arn}");
  b.p("Arn", () => input.Arn, "{Arn}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeConfigurationCommand");
var se_DescribeConfigurationRevisionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/configurations/{Arn}/revisions/{Revision}");
  b.p("Arn", () => input.Arn, "{Arn}", false);
  b.p("Revision", () => input.Revision.toString(), "{Revision}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeConfigurationRevisionCommand");
var se_DescribeReplicatorCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/replication/v1/replicators/{ReplicatorArn}");
  b.p("ReplicatorArn", () => input.ReplicatorArn, "{ReplicatorArn}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeReplicatorCommand");
var se_DescribeVpcConnectionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/vpc-connection/{Arn}");
  b.p("Arn", () => input.Arn, "{Arn}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeVpcConnectionCommand");
var se_GetBootstrapBrokersCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/clusters/{ClusterArn}/bootstrap-brokers");
  b.p("ClusterArn", () => input.ClusterArn, "{ClusterArn}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetBootstrapBrokersCommand");
var se_GetClusterPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/clusters/{ClusterArn}/policy");
  b.p("ClusterArn", () => input.ClusterArn, "{ClusterArn}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetClusterPolicyCommand");
var se_GetCompatibleKafkaVersionsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/compatible-kafka-versions");
  const query = (0, import_smithy_client.map)({
    [_cA]: [, input[_CA]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_GetCompatibleKafkaVersionsCommand");
var se_ListClientVpcConnectionsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/clusters/{ClusterArn}/client-vpc-connections");
  b.p("ClusterArn", () => input.ClusterArn, "{ClusterArn}", false);
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListClientVpcConnectionsCommand");
var se_ListClusterOperationsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/clusters/{ClusterArn}/operations");
  b.p("ClusterArn", () => input.ClusterArn, "{ClusterArn}", false);
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListClusterOperationsCommand");
var se_ListClusterOperationsV2Command = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/api/v2/clusters/{ClusterArn}/operations");
  b.p("ClusterArn", () => input.ClusterArn, "{ClusterArn}", false);
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListClusterOperationsV2Command");
var se_ListClustersCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/clusters");
  const query = (0, import_smithy_client.map)({
    [_cNF]: [, input[_CNF]],
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListClustersCommand");
var se_ListClustersV2Command = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/api/v2/clusters");
  const query = (0, import_smithy_client.map)({
    [_cNF]: [, input[_CNF]],
    [_cTF]: [, input[_CTF]],
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListClustersV2Command");
var se_ListConfigurationRevisionsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/configurations/{Arn}/revisions");
  b.p("Arn", () => input.Arn, "{Arn}", false);
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListConfigurationRevisionsCommand");
var se_ListConfigurationsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/configurations");
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListConfigurationsCommand");
var se_ListKafkaVersionsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/kafka-versions");
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListKafkaVersionsCommand");
var se_ListNodesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/clusters/{ClusterArn}/nodes");
  b.p("ClusterArn", () => input.ClusterArn, "{ClusterArn}", false);
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListNodesCommand");
var se_ListReplicatorsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/replication/v1/replicators");
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]],
    [_rNF]: [, input[_RNF]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListReplicatorsCommand");
var se_ListScramSecretsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/clusters/{ClusterArn}/scram-secrets");
  b.p("ClusterArn", () => input.ClusterArn, "{ClusterArn}", false);
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListScramSecretsCommand");
var se_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/tags/{ResourceArn}");
  b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_ListTagsForResourceCommand");
var se_ListVpcConnectionsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/vpc-connections");
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListVpcConnectionsCommand");
var se_PutClusterPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/clusters/{ClusterArn}/policy");
  b.p("ClusterArn", () => input.ClusterArn, "{ClusterArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      currentVersion: [, , `CurrentVersion`],
      policy: [, , `Policy`]
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_PutClusterPolicyCommand");
var se_RebootBrokerCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/clusters/{ClusterArn}/reboot-broker");
  b.p("ClusterArn", () => input.ClusterArn, "{ClusterArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      brokerIds: [, (_) => (0, import_smithy_client._json)(_), `BrokerIds`]
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_RebootBrokerCommand");
var se_RejectClientVpcConnectionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/clusters/{ClusterArn}/client-vpc-connection");
  b.p("ClusterArn", () => input.ClusterArn, "{ClusterArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      vpcConnectionArn: [, , `VpcConnectionArn`]
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_RejectClientVpcConnectionCommand");
var se_TagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/tags/{ResourceArn}");
  b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      tags: [, (_) => (0, import_smithy_client._json)(_), `Tags`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_TagResourceCommand");
var se_UntagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/tags/{ResourceArn}");
  b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
  const query = (0, import_smithy_client.map)({
    [_tK]: [(0, import_smithy_client.expectNonNull)(input.TagKeys, `TagKeys`) != null, () => input[_TK] || []]
  });
  let body;
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_UntagResourceCommand");
var se_UpdateBrokerCountCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/clusters/{ClusterArn}/nodes/count");
  b.p("ClusterArn", () => input.ClusterArn, "{ClusterArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      currentVersion: [, , `CurrentVersion`],
      targetNumberOfBrokerNodes: [, , `TargetNumberOfBrokerNodes`]
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateBrokerCountCommand");
var se_UpdateBrokerStorageCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/clusters/{ClusterArn}/nodes/storage");
  b.p("ClusterArn", () => input.ClusterArn, "{ClusterArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      currentVersion: [, , `CurrentVersion`],
      targetBrokerEBSVolumeInfo: [, (_) => se___listOfBrokerEBSVolumeInfo(_, context), `TargetBrokerEBSVolumeInfo`]
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateBrokerStorageCommand");
var se_UpdateBrokerTypeCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/clusters/{ClusterArn}/nodes/type");
  b.p("ClusterArn", () => input.ClusterArn, "{ClusterArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      currentVersion: [, , `CurrentVersion`],
      targetInstanceType: [, , `TargetInstanceType`]
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateBrokerTypeCommand");
var se_UpdateClusterConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/clusters/{ClusterArn}/configuration");
  b.p("ClusterArn", () => input.ClusterArn, "{ClusterArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      configurationInfo: [, (_) => se_ConfigurationInfo(_, context), `ConfigurationInfo`],
      currentVersion: [, , `CurrentVersion`]
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateClusterConfigurationCommand");
var se_UpdateClusterKafkaVersionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/clusters/{ClusterArn}/version");
  b.p("ClusterArn", () => input.ClusterArn, "{ClusterArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      configurationInfo: [, (_) => se_ConfigurationInfo(_, context), `ConfigurationInfo`],
      currentVersion: [, , `CurrentVersion`],
      targetKafkaVersion: [, , `TargetKafkaVersion`]
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateClusterKafkaVersionCommand");
var se_UpdateConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/configurations/{Arn}");
  b.p("Arn", () => input.Arn, "{Arn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      description: [, , `Description`],
      serverProperties: [, (_) => context.base64Encoder(_), `ServerProperties`]
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateConfigurationCommand");
var se_UpdateConnectivityCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/clusters/{ClusterArn}/connectivity");
  b.p("ClusterArn", () => input.ClusterArn, "{ClusterArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      connectivityInfo: [, (_) => se_ConnectivityInfo(_, context), `ConnectivityInfo`],
      currentVersion: [, , `CurrentVersion`]
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateConnectivityCommand");
var se_UpdateMonitoringCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/clusters/{ClusterArn}/monitoring");
  b.p("ClusterArn", () => input.ClusterArn, "{ClusterArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      currentVersion: [, , `CurrentVersion`],
      enhancedMonitoring: [, , `EnhancedMonitoring`],
      loggingInfo: [, (_) => se_LoggingInfo(_, context), `LoggingInfo`],
      openMonitoring: [, (_) => se_OpenMonitoringInfo(_, context), `OpenMonitoring`]
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateMonitoringCommand");
var se_UpdateReplicationInfoCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/replication/v1/replicators/{ReplicatorArn}/replication-info");
  b.p("ReplicatorArn", () => input.ReplicatorArn, "{ReplicatorArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      consumerGroupReplication: [, (_) => se_ConsumerGroupReplicationUpdate(_, context), `ConsumerGroupReplication`],
      currentVersion: [, , `CurrentVersion`],
      sourceKafkaClusterArn: [, , `SourceKafkaClusterArn`],
      targetKafkaClusterArn: [, , `TargetKafkaClusterArn`],
      topicReplication: [, (_) => se_TopicReplicationUpdate(_, context), `TopicReplication`]
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateReplicationInfoCommand");
var se_UpdateSecurityCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/clusters/{ClusterArn}/security");
  b.p("ClusterArn", () => input.ClusterArn, "{ClusterArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      clientAuthentication: [, (_) => se_ClientAuthentication(_, context), `ClientAuthentication`],
      currentVersion: [, , `CurrentVersion`],
      encryptionInfo: [, (_) => se_EncryptionInfo(_, context), `EncryptionInfo`]
    })
  );
  b.m("PATCH").h(headers).b(body);
  return b.build();
}, "se_UpdateSecurityCommand");
var se_UpdateStorageCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/clusters/{ClusterArn}/storage");
  b.p("ClusterArn", () => input.ClusterArn, "{ClusterArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      currentVersion: [, , `CurrentVersion`],
      provisionedThroughput: [, (_) => se_ProvisionedThroughput(_, context), `ProvisionedThroughput`],
      storageMode: [, , `StorageMode`],
      volumeSizeGB: [, , `VolumeSizeGB`]
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateStorageCommand");
var de_BatchAssociateScramSecretCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ClusterArn: [, import_smithy_client.expectString, `clusterArn`],
    UnprocessedScramSecrets: [, (_) => de___listOfUnprocessedScramSecret(_, context), `unprocessedScramSecrets`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_BatchAssociateScramSecretCommand");
var de_BatchDisassociateScramSecretCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ClusterArn: [, import_smithy_client.expectString, `clusterArn`],
    UnprocessedScramSecrets: [, (_) => de___listOfUnprocessedScramSecret(_, context), `unprocessedScramSecrets`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_BatchDisassociateScramSecretCommand");
var de_CreateClusterCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ClusterArn: [, import_smithy_client.expectString, `clusterArn`],
    ClusterName: [, import_smithy_client.expectString, `clusterName`],
    State: [, import_smithy_client.expectString, `state`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateClusterCommand");
var de_CreateClusterV2Command = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ClusterArn: [, import_smithy_client.expectString, `clusterArn`],
    ClusterName: [, import_smithy_client.expectString, `clusterName`],
    ClusterType: [, import_smithy_client.expectString, `clusterType`],
    State: [, import_smithy_client.expectString, `state`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateClusterV2Command");
var de_CreateConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: [, import_smithy_client.expectString, `arn`],
    CreationTime: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `creationTime`],
    LatestRevision: [, (_) => de_ConfigurationRevision(_, context), `latestRevision`],
    Name: [, import_smithy_client.expectString, `name`],
    State: [, import_smithy_client.expectString, `state`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateConfigurationCommand");
var de_CreateReplicatorCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ReplicatorArn: [, import_smithy_client.expectString, `replicatorArn`],
    ReplicatorName: [, import_smithy_client.expectString, `replicatorName`],
    ReplicatorState: [, import_smithy_client.expectString, `replicatorState`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateReplicatorCommand");
var de_CreateVpcConnectionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Authentication: [, import_smithy_client.expectString, `authentication`],
    ClientSubnets: [, import_smithy_client._json, `clientSubnets`],
    CreationTime: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `creationTime`],
    SecurityGroups: [, import_smithy_client._json, `securityGroups`],
    State: [, import_smithy_client.expectString, `state`],
    Tags: [, import_smithy_client._json, `tags`],
    VpcConnectionArn: [, import_smithy_client.expectString, `vpcConnectionArn`],
    VpcId: [, import_smithy_client.expectString, `vpcId`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateVpcConnectionCommand");
var de_DeleteClusterCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ClusterArn: [, import_smithy_client.expectString, `clusterArn`],
    State: [, import_smithy_client.expectString, `state`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteClusterCommand");
var de_DeleteClusterPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteClusterPolicyCommand");
var de_DeleteConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: [, import_smithy_client.expectString, `arn`],
    State: [, import_smithy_client.expectString, `state`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteConfigurationCommand");
var de_DeleteReplicatorCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ReplicatorArn: [, import_smithy_client.expectString, `replicatorArn`],
    ReplicatorState: [, import_smithy_client.expectString, `replicatorState`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteReplicatorCommand");
var de_DeleteVpcConnectionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    State: [, import_smithy_client.expectString, `state`],
    VpcConnectionArn: [, import_smithy_client.expectString, `vpcConnectionArn`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteVpcConnectionCommand");
var de_DescribeClusterCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ClusterInfo: [, (_) => de_ClusterInfo(_, context), `clusterInfo`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeClusterCommand");
var de_DescribeClusterOperationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ClusterOperationInfo: [, (_) => de_ClusterOperationInfo(_, context), `clusterOperationInfo`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeClusterOperationCommand");
var de_DescribeClusterOperationV2Command = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ClusterOperationInfo: [, (_) => de_ClusterOperationV2(_, context), `clusterOperationInfo`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeClusterOperationV2Command");
var de_DescribeClusterV2Command = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ClusterInfo: [, (_) => de_Cluster(_, context), `clusterInfo`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeClusterV2Command");
var de_DescribeConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: [, import_smithy_client.expectString, `arn`],
    CreationTime: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `creationTime`],
    Description: [, import_smithy_client.expectString, `description`],
    KafkaVersions: [, import_smithy_client._json, `kafkaVersions`],
    LatestRevision: [, (_) => de_ConfigurationRevision(_, context), `latestRevision`],
    Name: [, import_smithy_client.expectString, `name`],
    State: [, import_smithy_client.expectString, `state`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeConfigurationCommand");
var de_DescribeConfigurationRevisionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: [, import_smithy_client.expectString, `arn`],
    CreationTime: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `creationTime`],
    Description: [, import_smithy_client.expectString, `description`],
    Revision: [, import_smithy_client.expectLong, `revision`],
    ServerProperties: [, context.base64Decoder, `serverProperties`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeConfigurationRevisionCommand");
var de_DescribeReplicatorCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    CreationTime: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `creationTime`],
    CurrentVersion: [, import_smithy_client.expectString, `currentVersion`],
    IsReplicatorReference: [, import_smithy_client.expectBoolean, `isReplicatorReference`],
    KafkaClusters: [, (_) => de___listOfKafkaClusterDescription(_, context), `kafkaClusters`],
    ReplicationInfoList: [, (_) => de___listOfReplicationInfoDescription(_, context), `replicationInfoList`],
    ReplicatorArn: [, import_smithy_client.expectString, `replicatorArn`],
    ReplicatorDescription: [, import_smithy_client.expectString, `replicatorDescription`],
    ReplicatorName: [, import_smithy_client.expectString, `replicatorName`],
    ReplicatorResourceArn: [, import_smithy_client.expectString, `replicatorResourceArn`],
    ReplicatorState: [, import_smithy_client.expectString, `replicatorState`],
    ServiceExecutionRoleArn: [, import_smithy_client.expectString, `serviceExecutionRoleArn`],
    StateInfo: [, (_) => de_ReplicationStateInfo(_, context), `stateInfo`],
    Tags: [, import_smithy_client._json, `tags`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeReplicatorCommand");
var de_DescribeVpcConnectionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Authentication: [, import_smithy_client.expectString, `authentication`],
    CreationTime: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `creationTime`],
    SecurityGroups: [, import_smithy_client._json, `securityGroups`],
    State: [, import_smithy_client.expectString, `state`],
    Subnets: [, import_smithy_client._json, `subnets`],
    Tags: [, import_smithy_client._json, `tags`],
    TargetClusterArn: [, import_smithy_client.expectString, `targetClusterArn`],
    VpcConnectionArn: [, import_smithy_client.expectString, `vpcConnectionArn`],
    VpcId: [, import_smithy_client.expectString, `vpcId`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeVpcConnectionCommand");
var de_GetBootstrapBrokersCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    BootstrapBrokerString: [, import_smithy_client.expectString, `bootstrapBrokerString`],
    BootstrapBrokerStringPublicSaslIam: [, import_smithy_client.expectString, `bootstrapBrokerStringPublicSaslIam`],
    BootstrapBrokerStringPublicSaslScram: [, import_smithy_client.expectString, `bootstrapBrokerStringPublicSaslScram`],
    BootstrapBrokerStringPublicTls: [, import_smithy_client.expectString, `bootstrapBrokerStringPublicTls`],
    BootstrapBrokerStringSaslIam: [, import_smithy_client.expectString, `bootstrapBrokerStringSaslIam`],
    BootstrapBrokerStringSaslScram: [, import_smithy_client.expectString, `bootstrapBrokerStringSaslScram`],
    BootstrapBrokerStringTls: [, import_smithy_client.expectString, `bootstrapBrokerStringTls`],
    BootstrapBrokerStringVpcConnectivitySaslIam: [, import_smithy_client.expectString, `bootstrapBrokerStringVpcConnectivitySaslIam`],
    BootstrapBrokerStringVpcConnectivitySaslScram: [, import_smithy_client.expectString, `bootstrapBrokerStringVpcConnectivitySaslScram`],
    BootstrapBrokerStringVpcConnectivityTls: [, import_smithy_client.expectString, `bootstrapBrokerStringVpcConnectivityTls`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetBootstrapBrokersCommand");
var de_GetClusterPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    CurrentVersion: [, import_smithy_client.expectString, `currentVersion`],
    Policy: [, import_smithy_client.expectString, `policy`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetClusterPolicyCommand");
var de_GetCompatibleKafkaVersionsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    CompatibleKafkaVersions: [, (_) => de___listOfCompatibleKafkaVersion(_, context), `compatibleKafkaVersions`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetCompatibleKafkaVersionsCommand");
var de_ListClientVpcConnectionsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ClientVpcConnections: [, (_) => de___listOfClientVpcConnection(_, context), `clientVpcConnections`],
    NextToken: [, import_smithy_client.expectString, `nextToken`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListClientVpcConnectionsCommand");
var de_ListClusterOperationsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ClusterOperationInfoList: [, (_) => de___listOfClusterOperationInfo(_, context), `clusterOperationInfoList`],
    NextToken: [, import_smithy_client.expectString, `nextToken`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListClusterOperationsCommand");
var de_ListClusterOperationsV2Command = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ClusterOperationInfoList: [, (_) => de___listOfClusterOperationV2Summary(_, context), `clusterOperationInfoList`],
    NextToken: [, import_smithy_client.expectString, `nextToken`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListClusterOperationsV2Command");
var de_ListClustersCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ClusterInfoList: [, (_) => de___listOfClusterInfo(_, context), `clusterInfoList`],
    NextToken: [, import_smithy_client.expectString, `nextToken`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListClustersCommand");
var de_ListClustersV2Command = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ClusterInfoList: [, (_) => de___listOfCluster(_, context), `clusterInfoList`],
    NextToken: [, import_smithy_client.expectString, `nextToken`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListClustersV2Command");
var de_ListConfigurationRevisionsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    NextToken: [, import_smithy_client.expectString, `nextToken`],
    Revisions: [, (_) => de___listOfConfigurationRevision(_, context), `revisions`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListConfigurationRevisionsCommand");
var de_ListConfigurationsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Configurations: [, (_) => de___listOfConfiguration(_, context), `configurations`],
    NextToken: [, import_smithy_client.expectString, `nextToken`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListConfigurationsCommand");
var de_ListKafkaVersionsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    KafkaVersions: [, (_) => de___listOfKafkaVersion(_, context), `kafkaVersions`],
    NextToken: [, import_smithy_client.expectString, `nextToken`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListKafkaVersionsCommand");
var de_ListNodesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    NextToken: [, import_smithy_client.expectString, `nextToken`],
    NodeInfoList: [, (_) => de___listOfNodeInfo(_, context), `nodeInfoList`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListNodesCommand");
var de_ListReplicatorsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    NextToken: [, import_smithy_client.expectString, `nextToken`],
    Replicators: [, (_) => de___listOfReplicatorSummary(_, context), `replicators`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListReplicatorsCommand");
var de_ListScramSecretsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    NextToken: [, import_smithy_client.expectString, `nextToken`],
    SecretArnList: [, import_smithy_client._json, `secretArnList`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListScramSecretsCommand");
var de_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Tags: [, import_smithy_client._json, `tags`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListTagsForResourceCommand");
var de_ListVpcConnectionsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    NextToken: [, import_smithy_client.expectString, `nextToken`],
    VpcConnections: [, (_) => de___listOfVpcConnection(_, context), `vpcConnections`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListVpcConnectionsCommand");
var de_PutClusterPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    CurrentVersion: [, import_smithy_client.expectString, `currentVersion`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_PutClusterPolicyCommand");
var de_RebootBrokerCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ClusterArn: [, import_smithy_client.expectString, `clusterArn`],
    ClusterOperationArn: [, import_smithy_client.expectString, `clusterOperationArn`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_RebootBrokerCommand");
var de_RejectClientVpcConnectionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_RejectClientVpcConnectionCommand");
var de_TagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_TagResourceCommand");
var de_UntagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_UntagResourceCommand");
var de_UpdateBrokerCountCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ClusterArn: [, import_smithy_client.expectString, `clusterArn`],
    ClusterOperationArn: [, import_smithy_client.expectString, `clusterOperationArn`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateBrokerCountCommand");
var de_UpdateBrokerStorageCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ClusterArn: [, import_smithy_client.expectString, `clusterArn`],
    ClusterOperationArn: [, import_smithy_client.expectString, `clusterOperationArn`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateBrokerStorageCommand");
var de_UpdateBrokerTypeCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ClusterArn: [, import_smithy_client.expectString, `clusterArn`],
    ClusterOperationArn: [, import_smithy_client.expectString, `clusterOperationArn`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateBrokerTypeCommand");
var de_UpdateClusterConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ClusterArn: [, import_smithy_client.expectString, `clusterArn`],
    ClusterOperationArn: [, import_smithy_client.expectString, `clusterOperationArn`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateClusterConfigurationCommand");
var de_UpdateClusterKafkaVersionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ClusterArn: [, import_smithy_client.expectString, `clusterArn`],
    ClusterOperationArn: [, import_smithy_client.expectString, `clusterOperationArn`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateClusterKafkaVersionCommand");
var de_UpdateConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: [, import_smithy_client.expectString, `arn`],
    LatestRevision: [, (_) => de_ConfigurationRevision(_, context), `latestRevision`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateConfigurationCommand");
var de_UpdateConnectivityCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ClusterArn: [, import_smithy_client.expectString, `clusterArn`],
    ClusterOperationArn: [, import_smithy_client.expectString, `clusterOperationArn`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateConnectivityCommand");
var de_UpdateMonitoringCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ClusterArn: [, import_smithy_client.expectString, `clusterArn`],
    ClusterOperationArn: [, import_smithy_client.expectString, `clusterOperationArn`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateMonitoringCommand");
var de_UpdateReplicationInfoCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ReplicatorArn: [, import_smithy_client.expectString, `replicatorArn`],
    ReplicatorState: [, import_smithy_client.expectString, `replicatorState`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateReplicationInfoCommand");
var de_UpdateSecurityCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ClusterArn: [, import_smithy_client.expectString, `clusterArn`],
    ClusterOperationArn: [, import_smithy_client.expectString, `clusterOperationArn`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateSecurityCommand");
var de_UpdateStorageCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ClusterArn: [, import_smithy_client.expectString, `clusterArn`],
    ClusterOperationArn: [, import_smithy_client.expectString, `clusterOperationArn`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateStorageCommand");
var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await (0, import_core2.parseJsonErrorBody)(output.body, context)
  };
  const errorCode = (0, import_core2.loadRestJsonErrorCode)(output, parsedOutput.body);
  switch (errorCode) {
    case "BadRequestException":
    case "com.amazonaws.kafka#BadRequestException":
      throw await de_BadRequestExceptionRes(parsedOutput, context);
    case "ForbiddenException":
    case "com.amazonaws.kafka#ForbiddenException":
      throw await de_ForbiddenExceptionRes(parsedOutput, context);
    case "InternalServerErrorException":
    case "com.amazonaws.kafka#InternalServerErrorException":
      throw await de_InternalServerErrorExceptionRes(parsedOutput, context);
    case "NotFoundException":
    case "com.amazonaws.kafka#NotFoundException":
      throw await de_NotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.kafka#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "TooManyRequestsException":
    case "com.amazonaws.kafka#TooManyRequestsException":
      throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.kafka#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    case "ConflictException":
    case "com.amazonaws.kafka#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CommandError");
var throwDefaultError = (0, import_smithy_client.withBaseException)(KafkaServiceException);
var de_BadRequestExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    InvalidParameter: [, import_smithy_client.expectString, `invalidParameter`],
    Message: [, import_smithy_client.expectString, `message`]
  });
  Object.assign(contents, doc);
  const exception = new BadRequestException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_BadRequestExceptionRes");
var de_ConflictExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    InvalidParameter: [, import_smithy_client.expectString, `invalidParameter`],
    Message: [, import_smithy_client.expectString, `message`]
  });
  Object.assign(contents, doc);
  const exception = new ConflictException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ConflictExceptionRes");
var de_ForbiddenExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    InvalidParameter: [, import_smithy_client.expectString, `invalidParameter`],
    Message: [, import_smithy_client.expectString, `message`]
  });
  Object.assign(contents, doc);
  const exception = new ForbiddenException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ForbiddenExceptionRes");
var de_InternalServerErrorExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    InvalidParameter: [, import_smithy_client.expectString, `invalidParameter`],
    Message: [, import_smithy_client.expectString, `message`]
  });
  Object.assign(contents, doc);
  const exception = new InternalServerErrorException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_InternalServerErrorExceptionRes");
var de_NotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    InvalidParameter: [, import_smithy_client.expectString, `invalidParameter`],
    Message: [, import_smithy_client.expectString, `message`]
  });
  Object.assign(contents, doc);
  const exception = new NotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_NotFoundExceptionRes");
var de_ServiceUnavailableExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    InvalidParameter: [, import_smithy_client.expectString, `invalidParameter`],
    Message: [, import_smithy_client.expectString, `message`]
  });
  Object.assign(contents, doc);
  const exception = new ServiceUnavailableException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ServiceUnavailableExceptionRes");
var de_TooManyRequestsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    InvalidParameter: [, import_smithy_client.expectString, `invalidParameter`],
    Message: [, import_smithy_client.expectString, `message`]
  });
  Object.assign(contents, doc);
  const exception = new TooManyRequestsException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_TooManyRequestsExceptionRes");
var de_UnauthorizedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    InvalidParameter: [, import_smithy_client.expectString, `invalidParameter`],
    Message: [, import_smithy_client.expectString, `message`]
  });
  Object.assign(contents, doc);
  const exception = new UnauthorizedException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_UnauthorizedExceptionRes");
var se___listOfBrokerEBSVolumeInfo = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_BrokerEBSVolumeInfo(entry, context);
  });
}, "se___listOfBrokerEBSVolumeInfo");
var se___listOfKafkaCluster = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_KafkaCluster(entry, context);
  });
}, "se___listOfKafkaCluster");
var se___listOfReplicationInfo = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_ReplicationInfo(entry, context);
  });
}, "se___listOfReplicationInfo");
var se___listOfVpcConfig = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_VpcConfig(entry, context);
  });
}, "se___listOfVpcConfig");
var se_AmazonMskCluster = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    mskClusterArn: [, , `MskClusterArn`]
  });
}, "se_AmazonMskCluster");
var se_BrokerEBSVolumeInfo = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    kafkaBrokerNodeId: [, , `KafkaBrokerNodeId`],
    provisionedThroughput: [, (_) => se_ProvisionedThroughput(_, context), `ProvisionedThroughput`],
    volumeSizeGB: [, , `VolumeSizeGB`]
  });
}, "se_BrokerEBSVolumeInfo");
var se_BrokerLogs = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    cloudWatchLogs: [, (_) => se_CloudWatchLogs(_, context), `CloudWatchLogs`],
    firehose: [, (_) => se_Firehose(_, context), `Firehose`],
    s3: [, (_) => se_S3(_, context), `S3`]
  });
}, "se_BrokerLogs");
var se_BrokerNodeGroupInfo = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    brokerAZDistribution: [, , `BrokerAZDistribution`],
    clientSubnets: [, import_smithy_client._json, `ClientSubnets`],
    connectivityInfo: [, (_) => se_ConnectivityInfo(_, context), `ConnectivityInfo`],
    instanceType: [, , `InstanceType`],
    securityGroups: [, import_smithy_client._json, `SecurityGroups`],
    storageInfo: [, (_) => se_StorageInfo(_, context), `StorageInfo`],
    zoneIds: [, import_smithy_client._json, `ZoneIds`]
  });
}, "se_BrokerNodeGroupInfo");
var se_ClientAuthentication = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    sasl: [, (_) => se_Sasl(_, context), `Sasl`],
    tls: [, (_) => se_Tls(_, context), `Tls`],
    unauthenticated: [, (_) => se_Unauthenticated(_, context), `Unauthenticated`]
  });
}, "se_ClientAuthentication");
var se_CloudWatchLogs = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    enabled: [, , `Enabled`],
    logGroup: [, , `LogGroup`]
  });
}, "se_CloudWatchLogs");
var se_ConfigurationInfo = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    arn: [, , `Arn`],
    revision: [, , `Revision`]
  });
}, "se_ConfigurationInfo");
var se_ConnectivityInfo = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    publicAccess: [, (_) => se_PublicAccess(_, context), `PublicAccess`],
    vpcConnectivity: [, (_) => se_VpcConnectivity(_, context), `VpcConnectivity`]
  });
}, "se_ConnectivityInfo");
var se_ConsumerGroupReplication = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    consumerGroupsToExclude: [, import_smithy_client._json, `ConsumerGroupsToExclude`],
    consumerGroupsToReplicate: [, import_smithy_client._json, `ConsumerGroupsToReplicate`],
    detectAndCopyNewConsumerGroups: [, , `DetectAndCopyNewConsumerGroups`],
    synchroniseConsumerGroupOffsets: [, , `SynchroniseConsumerGroupOffsets`]
  });
}, "se_ConsumerGroupReplication");
var se_ConsumerGroupReplicationUpdate = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    consumerGroupsToExclude: [, import_smithy_client._json, `ConsumerGroupsToExclude`],
    consumerGroupsToReplicate: [, import_smithy_client._json, `ConsumerGroupsToReplicate`],
    detectAndCopyNewConsumerGroups: [, , `DetectAndCopyNewConsumerGroups`],
    synchroniseConsumerGroupOffsets: [, , `SynchroniseConsumerGroupOffsets`]
  });
}, "se_ConsumerGroupReplicationUpdate");
var se_EBSStorageInfo = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    provisionedThroughput: [, (_) => se_ProvisionedThroughput(_, context), `ProvisionedThroughput`],
    volumeSize: [, , `VolumeSize`]
  });
}, "se_EBSStorageInfo");
var se_EncryptionAtRest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    dataVolumeKMSKeyId: [, , `DataVolumeKMSKeyId`]
  });
}, "se_EncryptionAtRest");
var se_EncryptionInfo = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    encryptionAtRest: [, (_) => se_EncryptionAtRest(_, context), `EncryptionAtRest`],
    encryptionInTransit: [, (_) => se_EncryptionInTransit(_, context), `EncryptionInTransit`]
  });
}, "se_EncryptionInfo");
var se_EncryptionInTransit = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    clientBroker: [, , `ClientBroker`],
    inCluster: [, , `InCluster`]
  });
}, "se_EncryptionInTransit");
var se_Firehose = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    deliveryStream: [, , `DeliveryStream`],
    enabled: [, , `Enabled`]
  });
}, "se_Firehose");
var se_Iam = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    enabled: [, , `Enabled`]
  });
}, "se_Iam");
var se_JmxExporterInfo = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    enabledInBroker: [, , `EnabledInBroker`]
  });
}, "se_JmxExporterInfo");
var se_KafkaCluster = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    amazonMskCluster: [, (_) => se_AmazonMskCluster(_, context), `AmazonMskCluster`],
    vpcConfig: [, (_) => se_KafkaClusterClientVpcConfig(_, context), `VpcConfig`]
  });
}, "se_KafkaCluster");
var se_KafkaClusterClientVpcConfig = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    securityGroupIds: [, import_smithy_client._json, `SecurityGroupIds`],
    subnetIds: [, import_smithy_client._json, `SubnetIds`]
  });
}, "se_KafkaClusterClientVpcConfig");
var se_LoggingInfo = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    brokerLogs: [, (_) => se_BrokerLogs(_, context), `BrokerLogs`]
  });
}, "se_LoggingInfo");
var se_NodeExporterInfo = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    enabledInBroker: [, , `EnabledInBroker`]
  });
}, "se_NodeExporterInfo");
var se_OpenMonitoringInfo = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    prometheus: [, (_) => se_PrometheusInfo(_, context), `Prometheus`]
  });
}, "se_OpenMonitoringInfo");
var se_PrometheusInfo = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    jmxExporter: [, (_) => se_JmxExporterInfo(_, context), `JmxExporter`],
    nodeExporter: [, (_) => se_NodeExporterInfo(_, context), `NodeExporter`]
  });
}, "se_PrometheusInfo");
var se_ProvisionedRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    brokerNodeGroupInfo: [, (_) => se_BrokerNodeGroupInfo(_, context), `BrokerNodeGroupInfo`],
    clientAuthentication: [, (_) => se_ClientAuthentication(_, context), `ClientAuthentication`],
    configurationInfo: [, (_) => se_ConfigurationInfo(_, context), `ConfigurationInfo`],
    encryptionInfo: [, (_) => se_EncryptionInfo(_, context), `EncryptionInfo`],
    enhancedMonitoring: [, , `EnhancedMonitoring`],
    kafkaVersion: [, , `KafkaVersion`],
    loggingInfo: [, (_) => se_LoggingInfo(_, context), `LoggingInfo`],
    numberOfBrokerNodes: [, , `NumberOfBrokerNodes`],
    openMonitoring: [, (_) => se_OpenMonitoringInfo(_, context), `OpenMonitoring`],
    storageMode: [, , `StorageMode`]
  });
}, "se_ProvisionedRequest");
var se_ProvisionedThroughput = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    enabled: [, , `Enabled`],
    volumeThroughput: [, , `VolumeThroughput`]
  });
}, "se_ProvisionedThroughput");
var se_PublicAccess = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    type: [, , `Type`]
  });
}, "se_PublicAccess");
var se_ReplicationInfo = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    consumerGroupReplication: [, (_) => se_ConsumerGroupReplication(_, context), `ConsumerGroupReplication`],
    sourceKafkaClusterArn: [, , `SourceKafkaClusterArn`],
    targetCompressionType: [, , `TargetCompressionType`],
    targetKafkaClusterArn: [, , `TargetKafkaClusterArn`],
    topicReplication: [, (_) => se_TopicReplication(_, context), `TopicReplication`]
  });
}, "se_ReplicationInfo");
var se_ReplicationStartingPosition = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    type: [, , `Type`]
  });
}, "se_ReplicationStartingPosition");
var se_ReplicationTopicNameConfiguration = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    type: [, , `Type`]
  });
}, "se_ReplicationTopicNameConfiguration");
var se_S3 = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    bucket: [, , `Bucket`],
    enabled: [, , `Enabled`],
    prefix: [, , `Prefix`]
  });
}, "se_S3");
var se_Sasl = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    iam: [, (_) => se_Iam(_, context), `Iam`],
    scram: [, (_) => se_Scram(_, context), `Scram`]
  });
}, "se_Sasl");
var se_Scram = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    enabled: [, , `Enabled`]
  });
}, "se_Scram");
var se_ServerlessClientAuthentication = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    sasl: [, (_) => se_ServerlessSasl(_, context), `Sasl`]
  });
}, "se_ServerlessClientAuthentication");
var se_ServerlessRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    clientAuthentication: [, (_) => se_ServerlessClientAuthentication(_, context), `ClientAuthentication`],
    vpcConfigs: [, (_) => se___listOfVpcConfig(_, context), `VpcConfigs`]
  });
}, "se_ServerlessRequest");
var se_ServerlessSasl = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    iam: [, (_) => se_Iam(_, context), `Iam`]
  });
}, "se_ServerlessSasl");
var se_StorageInfo = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    ebsStorageInfo: [, (_) => se_EBSStorageInfo(_, context), `EbsStorageInfo`]
  });
}, "se_StorageInfo");
var se_Tls = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    certificateAuthorityArnList: [, import_smithy_client._json, `CertificateAuthorityArnList`],
    enabled: [, , `Enabled`]
  });
}, "se_Tls");
var se_TopicReplication = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    copyAccessControlListsForTopics: [, , `CopyAccessControlListsForTopics`],
    copyTopicConfigurations: [, , `CopyTopicConfigurations`],
    detectAndCopyNewTopics: [, , `DetectAndCopyNewTopics`],
    startingPosition: [, (_) => se_ReplicationStartingPosition(_, context), `StartingPosition`],
    topicNameConfiguration: [, (_) => se_ReplicationTopicNameConfiguration(_, context), `TopicNameConfiguration`],
    topicsToExclude: [, import_smithy_client._json, `TopicsToExclude`],
    topicsToReplicate: [, import_smithy_client._json, `TopicsToReplicate`]
  });
}, "se_TopicReplication");
var se_TopicReplicationUpdate = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    copyAccessControlListsForTopics: [, , `CopyAccessControlListsForTopics`],
    copyTopicConfigurations: [, , `CopyTopicConfigurations`],
    detectAndCopyNewTopics: [, , `DetectAndCopyNewTopics`],
    topicsToExclude: [, import_smithy_client._json, `TopicsToExclude`],
    topicsToReplicate: [, import_smithy_client._json, `TopicsToReplicate`]
  });
}, "se_TopicReplicationUpdate");
var se_Unauthenticated = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    enabled: [, , `Enabled`]
  });
}, "se_Unauthenticated");
var se_VpcConfig = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    securityGroupIds: [, import_smithy_client._json, `SecurityGroupIds`],
    subnetIds: [, import_smithy_client._json, `SubnetIds`]
  });
}, "se_VpcConfig");
var se_VpcConnectivity = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    clientAuthentication: [, (_) => se_VpcConnectivityClientAuthentication(_, context), `ClientAuthentication`]
  });
}, "se_VpcConnectivity");
var se_VpcConnectivityClientAuthentication = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    sasl: [, (_) => se_VpcConnectivitySasl(_, context), `Sasl`],
    tls: [, (_) => se_VpcConnectivityTls(_, context), `Tls`]
  });
}, "se_VpcConnectivityClientAuthentication");
var se_VpcConnectivityIam = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    enabled: [, , `Enabled`]
  });
}, "se_VpcConnectivityIam");
var se_VpcConnectivitySasl = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    iam: [, (_) => se_VpcConnectivityIam(_, context), `Iam`],
    scram: [, (_) => se_VpcConnectivityScram(_, context), `Scram`]
  });
}, "se_VpcConnectivitySasl");
var se_VpcConnectivityScram = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    enabled: [, , `Enabled`]
  });
}, "se_VpcConnectivityScram");
var se_VpcConnectivityTls = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    enabled: [, , `Enabled`]
  });
}, "se_VpcConnectivityTls");
var de___listOf__double = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.limitedParseDouble)(entry);
  });
  return retVal;
}, "de___listOf__double");
var de___listOfBrokerEBSVolumeInfo = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_BrokerEBSVolumeInfo(entry, context);
  });
  return retVal;
}, "de___listOfBrokerEBSVolumeInfo");
var de___listOfClientVpcConnection = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ClientVpcConnection(entry, context);
  });
  return retVal;
}, "de___listOfClientVpcConnection");
var de___listOfCluster = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Cluster(entry, context);
  });
  return retVal;
}, "de___listOfCluster");
var de___listOfClusterInfo = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ClusterInfo(entry, context);
  });
  return retVal;
}, "de___listOfClusterInfo");
var de___listOfClusterOperationInfo = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ClusterOperationInfo(entry, context);
  });
  return retVal;
}, "de___listOfClusterOperationInfo");
var de___listOfClusterOperationStep = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ClusterOperationStep(entry, context);
  });
  return retVal;
}, "de___listOfClusterOperationStep");
var de___listOfClusterOperationV2Summary = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ClusterOperationV2Summary(entry, context);
  });
  return retVal;
}, "de___listOfClusterOperationV2Summary");
var de___listOfCompatibleKafkaVersion = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_CompatibleKafkaVersion(entry, context);
  });
  return retVal;
}, "de___listOfCompatibleKafkaVersion");
var de___listOfConfiguration = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Configuration(entry, context);
  });
  return retVal;
}, "de___listOfConfiguration");
var de___listOfConfigurationRevision = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ConfigurationRevision(entry, context);
  });
  return retVal;
}, "de___listOfConfigurationRevision");
var de___listOfKafkaClusterDescription = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_KafkaClusterDescription(entry, context);
  });
  return retVal;
}, "de___listOfKafkaClusterDescription");
var de___listOfKafkaClusterSummary = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_KafkaClusterSummary(entry, context);
  });
  return retVal;
}, "de___listOfKafkaClusterSummary");
var de___listOfKafkaVersion = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_KafkaVersion(entry, context);
  });
  return retVal;
}, "de___listOfKafkaVersion");
var de___listOfNodeInfo = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_NodeInfo(entry, context);
  });
  return retVal;
}, "de___listOfNodeInfo");
var de___listOfReplicationInfoDescription = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ReplicationInfoDescription(entry, context);
  });
  return retVal;
}, "de___listOfReplicationInfoDescription");
var de___listOfReplicationInfoSummary = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ReplicationInfoSummary(entry, context);
  });
  return retVal;
}, "de___listOfReplicationInfoSummary");
var de___listOfReplicatorSummary = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ReplicatorSummary(entry, context);
  });
  return retVal;
}, "de___listOfReplicatorSummary");
var de___listOfUnprocessedScramSecret = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_UnprocessedScramSecret(entry, context);
  });
  return retVal;
}, "de___listOfUnprocessedScramSecret");
var de___listOfVpcConfig = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_VpcConfig(entry, context);
  });
  return retVal;
}, "de___listOfVpcConfig");
var de___listOfVpcConnection = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_VpcConnection(entry, context);
  });
  return retVal;
}, "de___listOfVpcConnection");
var de_AmazonMskCluster = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    MskClusterArn: [, import_smithy_client.expectString, `mskClusterArn`]
  });
}, "de_AmazonMskCluster");
var de_BrokerCountUpdateInfo = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CreatedBrokerIds: [, (_) => de___listOf__double(_, context), `createdBrokerIds`],
    DeletedBrokerIds: [, (_) => de___listOf__double(_, context), `deletedBrokerIds`]
  });
}, "de_BrokerCountUpdateInfo");
var de_BrokerEBSVolumeInfo = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    KafkaBrokerNodeId: [, import_smithy_client.expectString, `kafkaBrokerNodeId`],
    ProvisionedThroughput: [, (_) => de_ProvisionedThroughput(_, context), `provisionedThroughput`],
    VolumeSizeGB: [, import_smithy_client.expectInt32, `volumeSizeGB`]
  });
}, "de_BrokerEBSVolumeInfo");
var de_BrokerLogs = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CloudWatchLogs: [, (_) => de_CloudWatchLogs(_, context), `cloudWatchLogs`],
    Firehose: [, (_) => de_Firehose(_, context), `firehose`],
    S3: [, (_) => de_S3(_, context), `s3`]
  });
}, "de_BrokerLogs");
var de_BrokerNodeGroupInfo = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    BrokerAZDistribution: [, import_smithy_client.expectString, `brokerAZDistribution`],
    ClientSubnets: [, import_smithy_client._json, `clientSubnets`],
    ConnectivityInfo: [, (_) => de_ConnectivityInfo(_, context), `connectivityInfo`],
    InstanceType: [, import_smithy_client.expectString, `instanceType`],
    SecurityGroups: [, import_smithy_client._json, `securityGroups`],
    StorageInfo: [, (_) => de_StorageInfo(_, context), `storageInfo`],
    ZoneIds: [, import_smithy_client._json, `zoneIds`]
  });
}, "de_BrokerNodeGroupInfo");
var de_BrokerNodeInfo = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AttachedENIId: [, import_smithy_client.expectString, `attachedENIId`],
    BrokerId: [, import_smithy_client.limitedParseDouble, `brokerId`],
    ClientSubnet: [, import_smithy_client.expectString, `clientSubnet`],
    ClientVpcIpAddress: [, import_smithy_client.expectString, `clientVpcIpAddress`],
    CurrentBrokerSoftwareInfo: [, (_) => de_BrokerSoftwareInfo(_, context), `currentBrokerSoftwareInfo`],
    Endpoints: [, import_smithy_client._json, `endpoints`]
  });
}, "de_BrokerNodeInfo");
var de_BrokerSoftwareInfo = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ConfigurationArn: [, import_smithy_client.expectString, `configurationArn`],
    ConfigurationRevision: [, import_smithy_client.expectLong, `configurationRevision`],
    KafkaVersion: [, import_smithy_client.expectString, `kafkaVersion`]
  });
}, "de_BrokerSoftwareInfo");
var de_ClientAuthentication = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Sasl: [, (_) => de_Sasl(_, context), `sasl`],
    Tls: [, (_) => de_Tls(_, context), `tls`],
    Unauthenticated: [, (_) => de_Unauthenticated(_, context), `unauthenticated`]
  });
}, "de_ClientAuthentication");
var de_ClientVpcConnection = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Authentication: [, import_smithy_client.expectString, `authentication`],
    CreationTime: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `creationTime`],
    Owner: [, import_smithy_client.expectString, `owner`],
    State: [, import_smithy_client.expectString, `state`],
    VpcConnectionArn: [, import_smithy_client.expectString, `vpcConnectionArn`]
  });
}, "de_ClientVpcConnection");
var de_CloudWatchLogs = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Enabled: [, import_smithy_client.expectBoolean, `enabled`],
    LogGroup: [, import_smithy_client.expectString, `logGroup`]
  });
}, "de_CloudWatchLogs");
var de_Cluster = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ActiveOperationArn: [, import_smithy_client.expectString, `activeOperationArn`],
    ClusterArn: [, import_smithy_client.expectString, `clusterArn`],
    ClusterName: [, import_smithy_client.expectString, `clusterName`],
    ClusterType: [, import_smithy_client.expectString, `clusterType`],
    CreationTime: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `creationTime`],
    CurrentVersion: [, import_smithy_client.expectString, `currentVersion`],
    Provisioned: [, (_) => de_Provisioned(_, context), `provisioned`],
    Serverless: [, (_) => de_Serverless(_, context), `serverless`],
    State: [, import_smithy_client.expectString, `state`],
    StateInfo: [, (_) => de_StateInfo(_, context), `stateInfo`],
    Tags: [, import_smithy_client._json, `tags`]
  });
}, "de_Cluster");
var de_ClusterInfo = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ActiveOperationArn: [, import_smithy_client.expectString, `activeOperationArn`],
    BrokerNodeGroupInfo: [, (_) => de_BrokerNodeGroupInfo(_, context), `brokerNodeGroupInfo`],
    ClientAuthentication: [, (_) => de_ClientAuthentication(_, context), `clientAuthentication`],
    ClusterArn: [, import_smithy_client.expectString, `clusterArn`],
    ClusterName: [, import_smithy_client.expectString, `clusterName`],
    CreationTime: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `creationTime`],
    CurrentBrokerSoftwareInfo: [, (_) => de_BrokerSoftwareInfo(_, context), `currentBrokerSoftwareInfo`],
    CurrentVersion: [, import_smithy_client.expectString, `currentVersion`],
    CustomerActionStatus: [, import_smithy_client.expectString, `customerActionStatus`],
    EncryptionInfo: [, (_) => de_EncryptionInfo(_, context), `encryptionInfo`],
    EnhancedMonitoring: [, import_smithy_client.expectString, `enhancedMonitoring`],
    LoggingInfo: [, (_) => de_LoggingInfo(_, context), `loggingInfo`],
    NumberOfBrokerNodes: [, import_smithy_client.expectInt32, `numberOfBrokerNodes`],
    OpenMonitoring: [, (_) => de_OpenMonitoring(_, context), `openMonitoring`],
    State: [, import_smithy_client.expectString, `state`],
    StateInfo: [, (_) => de_StateInfo(_, context), `stateInfo`],
    StorageMode: [, import_smithy_client.expectString, `storageMode`],
    Tags: [, import_smithy_client._json, `tags`],
    ZookeeperConnectString: [, import_smithy_client.expectString, `zookeeperConnectString`],
    ZookeeperConnectStringTls: [, import_smithy_client.expectString, `zookeeperConnectStringTls`]
  });
}, "de_ClusterInfo");
var de_ClusterOperationInfo = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ClientRequestId: [, import_smithy_client.expectString, `clientRequestId`],
    ClusterArn: [, import_smithy_client.expectString, `clusterArn`],
    CreationTime: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `creationTime`],
    EndTime: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `endTime`],
    ErrorInfo: [, (_) => de_ErrorInfo(_, context), `errorInfo`],
    OperationArn: [, import_smithy_client.expectString, `operationArn`],
    OperationState: [, import_smithy_client.expectString, `operationState`],
    OperationSteps: [, (_) => de___listOfClusterOperationStep(_, context), `operationSteps`],
    OperationType: [, import_smithy_client.expectString, `operationType`],
    SourceClusterInfo: [, (_) => de_MutableClusterInfo(_, context), `sourceClusterInfo`],
    TargetClusterInfo: [, (_) => de_MutableClusterInfo(_, context), `targetClusterInfo`],
    VpcConnectionInfo: [, (_) => de_VpcConnectionInfo(_, context), `vpcConnectionInfo`]
  });
}, "de_ClusterOperationInfo");
var de_ClusterOperationStep = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    StepInfo: [, (_) => de_ClusterOperationStepInfo(_, context), `stepInfo`],
    StepName: [, import_smithy_client.expectString, `stepName`]
  });
}, "de_ClusterOperationStep");
var de_ClusterOperationStepInfo = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    StepStatus: [, import_smithy_client.expectString, `stepStatus`]
  });
}, "de_ClusterOperationStepInfo");
var de_ClusterOperationV2 = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ClusterArn: [, import_smithy_client.expectString, `clusterArn`],
    ClusterType: [, import_smithy_client.expectString, `clusterType`],
    EndTime: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `endTime`],
    ErrorInfo: [, (_) => de_ErrorInfo(_, context), `errorInfo`],
    OperationArn: [, import_smithy_client.expectString, `operationArn`],
    OperationState: [, import_smithy_client.expectString, `operationState`],
    OperationType: [, import_smithy_client.expectString, `operationType`],
    Provisioned: [, (_) => de_ClusterOperationV2Provisioned(_, context), `provisioned`],
    Serverless: [, (_) => de_ClusterOperationV2Serverless(_, context), `serverless`],
    StartTime: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `startTime`]
  });
}, "de_ClusterOperationV2");
var de_ClusterOperationV2Provisioned = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    OperationSteps: [, (_) => de___listOfClusterOperationStep(_, context), `operationSteps`],
    SourceClusterInfo: [, (_) => de_MutableClusterInfo(_, context), `sourceClusterInfo`],
    TargetClusterInfo: [, (_) => de_MutableClusterInfo(_, context), `targetClusterInfo`],
    VpcConnectionInfo: [, (_) => de_VpcConnectionInfo(_, context), `vpcConnectionInfo`]
  });
}, "de_ClusterOperationV2Provisioned");
var de_ClusterOperationV2Serverless = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    VpcConnectionInfo: [, (_) => de_VpcConnectionInfoServerless(_, context), `vpcConnectionInfo`]
  });
}, "de_ClusterOperationV2Serverless");
var de_ClusterOperationV2Summary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ClusterArn: [, import_smithy_client.expectString, `clusterArn`],
    ClusterType: [, import_smithy_client.expectString, `clusterType`],
    EndTime: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `endTime`],
    OperationArn: [, import_smithy_client.expectString, `operationArn`],
    OperationState: [, import_smithy_client.expectString, `operationState`],
    OperationType: [, import_smithy_client.expectString, `operationType`],
    StartTime: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `startTime`]
  });
}, "de_ClusterOperationV2Summary");
var de_CompatibleKafkaVersion = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    SourceVersion: [, import_smithy_client.expectString, `sourceVersion`],
    TargetVersions: [, import_smithy_client._json, `targetVersions`]
  });
}, "de_CompatibleKafkaVersion");
var de_Configuration = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Arn: [, import_smithy_client.expectString, `arn`],
    CreationTime: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `creationTime`],
    Description: [, import_smithy_client.expectString, `description`],
    KafkaVersions: [, import_smithy_client._json, `kafkaVersions`],
    LatestRevision: [, (_) => de_ConfigurationRevision(_, context), `latestRevision`],
    Name: [, import_smithy_client.expectString, `name`],
    State: [, import_smithy_client.expectString, `state`]
  });
}, "de_Configuration");
var de_ConfigurationInfo = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Arn: [, import_smithy_client.expectString, `arn`],
    Revision: [, import_smithy_client.expectLong, `revision`]
  });
}, "de_ConfigurationInfo");
var de_ConfigurationRevision = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CreationTime: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `creationTime`],
    Description: [, import_smithy_client.expectString, `description`],
    Revision: [, import_smithy_client.expectLong, `revision`]
  });
}, "de_ConfigurationRevision");
var de_ConnectivityInfo = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    PublicAccess: [, (_) => de_PublicAccess(_, context), `publicAccess`],
    VpcConnectivity: [, (_) => de_VpcConnectivity(_, context), `vpcConnectivity`]
  });
}, "de_ConnectivityInfo");
var de_ConsumerGroupReplication = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ConsumerGroupsToExclude: [, import_smithy_client._json, `consumerGroupsToExclude`],
    ConsumerGroupsToReplicate: [, import_smithy_client._json, `consumerGroupsToReplicate`],
    DetectAndCopyNewConsumerGroups: [, import_smithy_client.expectBoolean, `detectAndCopyNewConsumerGroups`],
    SynchroniseConsumerGroupOffsets: [, import_smithy_client.expectBoolean, `synchroniseConsumerGroupOffsets`]
  });
}, "de_ConsumerGroupReplication");
var de_ControllerNodeInfo = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Endpoints: [, import_smithy_client._json, `endpoints`]
  });
}, "de_ControllerNodeInfo");
var de_EBSStorageInfo = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ProvisionedThroughput: [, (_) => de_ProvisionedThroughput(_, context), `provisionedThroughput`],
    VolumeSize: [, import_smithy_client.expectInt32, `volumeSize`]
  });
}, "de_EBSStorageInfo");
var de_EncryptionAtRest = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    DataVolumeKMSKeyId: [, import_smithy_client.expectString, `dataVolumeKMSKeyId`]
  });
}, "de_EncryptionAtRest");
var de_EncryptionInfo = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    EncryptionAtRest: [, (_) => de_EncryptionAtRest(_, context), `encryptionAtRest`],
    EncryptionInTransit: [, (_) => de_EncryptionInTransit(_, context), `encryptionInTransit`]
  });
}, "de_EncryptionInfo");
var de_EncryptionInTransit = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ClientBroker: [, import_smithy_client.expectString, `clientBroker`],
    InCluster: [, import_smithy_client.expectBoolean, `inCluster`]
  });
}, "de_EncryptionInTransit");
var de_ErrorInfo = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ErrorCode: [, import_smithy_client.expectString, `errorCode`],
    ErrorString: [, import_smithy_client.expectString, `errorString`]
  });
}, "de_ErrorInfo");
var de_Firehose = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    DeliveryStream: [, import_smithy_client.expectString, `deliveryStream`],
    Enabled: [, import_smithy_client.expectBoolean, `enabled`]
  });
}, "de_Firehose");
var de_Iam = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Enabled: [, import_smithy_client.expectBoolean, `enabled`]
  });
}, "de_Iam");
var de_JmxExporter = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    EnabledInBroker: [, import_smithy_client.expectBoolean, `enabledInBroker`]
  });
}, "de_JmxExporter");
var de_JmxExporterInfo = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    EnabledInBroker: [, import_smithy_client.expectBoolean, `enabledInBroker`]
  });
}, "de_JmxExporterInfo");
var de_KafkaClusterClientVpcConfig = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    SecurityGroupIds: [, import_smithy_client._json, `securityGroupIds`],
    SubnetIds: [, import_smithy_client._json, `subnetIds`]
  });
}, "de_KafkaClusterClientVpcConfig");
var de_KafkaClusterDescription = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AmazonMskCluster: [, (_) => de_AmazonMskCluster(_, context), `amazonMskCluster`],
    KafkaClusterAlias: [, import_smithy_client.expectString, `kafkaClusterAlias`],
    VpcConfig: [, (_) => de_KafkaClusterClientVpcConfig(_, context), `vpcConfig`]
  });
}, "de_KafkaClusterDescription");
var de_KafkaClusterSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AmazonMskCluster: [, (_) => de_AmazonMskCluster(_, context), `amazonMskCluster`],
    KafkaClusterAlias: [, import_smithy_client.expectString, `kafkaClusterAlias`]
  });
}, "de_KafkaClusterSummary");
var de_KafkaVersion = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Status: [, import_smithy_client.expectString, `status`],
    Version: [, import_smithy_client.expectString, `version`]
  });
}, "de_KafkaVersion");
var de_LoggingInfo = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    BrokerLogs: [, (_) => de_BrokerLogs(_, context), `brokerLogs`]
  });
}, "de_LoggingInfo");
var de_MutableClusterInfo = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    BrokerCountUpdateInfo: [, (_) => de_BrokerCountUpdateInfo(_, context), `brokerCountUpdateInfo`],
    BrokerEBSVolumeInfo: [, (_) => de___listOfBrokerEBSVolumeInfo(_, context), `brokerEBSVolumeInfo`],
    ClientAuthentication: [, (_) => de_ClientAuthentication(_, context), `clientAuthentication`],
    ConfigurationInfo: [, (_) => de_ConfigurationInfo(_, context), `configurationInfo`],
    ConnectivityInfo: [, (_) => de_ConnectivityInfo(_, context), `connectivityInfo`],
    EncryptionInfo: [, (_) => de_EncryptionInfo(_, context), `encryptionInfo`],
    EnhancedMonitoring: [, import_smithy_client.expectString, `enhancedMonitoring`],
    InstanceType: [, import_smithy_client.expectString, `instanceType`],
    KafkaVersion: [, import_smithy_client.expectString, `kafkaVersion`],
    LoggingInfo: [, (_) => de_LoggingInfo(_, context), `loggingInfo`],
    NumberOfBrokerNodes: [, import_smithy_client.expectInt32, `numberOfBrokerNodes`],
    OpenMonitoring: [, (_) => de_OpenMonitoring(_, context), `openMonitoring`],
    StorageMode: [, import_smithy_client.expectString, `storageMode`]
  });
}, "de_MutableClusterInfo");
var de_NodeExporter = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    EnabledInBroker: [, import_smithy_client.expectBoolean, `enabledInBroker`]
  });
}, "de_NodeExporter");
var de_NodeExporterInfo = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    EnabledInBroker: [, import_smithy_client.expectBoolean, `enabledInBroker`]
  });
}, "de_NodeExporterInfo");
var de_NodeInfo = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AddedToClusterTime: [, import_smithy_client.expectString, `addedToClusterTime`],
    BrokerNodeInfo: [, (_) => de_BrokerNodeInfo(_, context), `brokerNodeInfo`],
    ControllerNodeInfo: [, (_) => de_ControllerNodeInfo(_, context), `controllerNodeInfo`],
    InstanceType: [, import_smithy_client.expectString, `instanceType`],
    NodeARN: [, import_smithy_client.expectString, `nodeARN`],
    NodeType: [, import_smithy_client.expectString, `nodeType`],
    ZookeeperNodeInfo: [, (_) => de_ZookeeperNodeInfo(_, context), `zookeeperNodeInfo`]
  });
}, "de_NodeInfo");
var de_OpenMonitoring = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Prometheus: [, (_) => de_Prometheus(_, context), `prometheus`]
  });
}, "de_OpenMonitoring");
var de_OpenMonitoringInfo = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Prometheus: [, (_) => de_PrometheusInfo(_, context), `prometheus`]
  });
}, "de_OpenMonitoringInfo");
var de_Prometheus = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    JmxExporter: [, (_) => de_JmxExporter(_, context), `jmxExporter`],
    NodeExporter: [, (_) => de_NodeExporter(_, context), `nodeExporter`]
  });
}, "de_Prometheus");
var de_PrometheusInfo = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    JmxExporter: [, (_) => de_JmxExporterInfo(_, context), `jmxExporter`],
    NodeExporter: [, (_) => de_NodeExporterInfo(_, context), `nodeExporter`]
  });
}, "de_PrometheusInfo");
var de_Provisioned = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    BrokerNodeGroupInfo: [, (_) => de_BrokerNodeGroupInfo(_, context), `brokerNodeGroupInfo`],
    ClientAuthentication: [, (_) => de_ClientAuthentication(_, context), `clientAuthentication`],
    CurrentBrokerSoftwareInfo: [, (_) => de_BrokerSoftwareInfo(_, context), `currentBrokerSoftwareInfo`],
    CustomerActionStatus: [, import_smithy_client.expectString, `customerActionStatus`],
    EncryptionInfo: [, (_) => de_EncryptionInfo(_, context), `encryptionInfo`],
    EnhancedMonitoring: [, import_smithy_client.expectString, `enhancedMonitoring`],
    LoggingInfo: [, (_) => de_LoggingInfo(_, context), `loggingInfo`],
    NumberOfBrokerNodes: [, import_smithy_client.expectInt32, `numberOfBrokerNodes`],
    OpenMonitoring: [, (_) => de_OpenMonitoringInfo(_, context), `openMonitoring`],
    StorageMode: [, import_smithy_client.expectString, `storageMode`],
    ZookeeperConnectString: [, import_smithy_client.expectString, `zookeeperConnectString`],
    ZookeeperConnectStringTls: [, import_smithy_client.expectString, `zookeeperConnectStringTls`]
  });
}, "de_Provisioned");
var de_ProvisionedThroughput = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Enabled: [, import_smithy_client.expectBoolean, `enabled`],
    VolumeThroughput: [, import_smithy_client.expectInt32, `volumeThroughput`]
  });
}, "de_ProvisionedThroughput");
var de_PublicAccess = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Type: [, import_smithy_client.expectString, `type`]
  });
}, "de_PublicAccess");
var de_ReplicationInfoDescription = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ConsumerGroupReplication: [, (_) => de_ConsumerGroupReplication(_, context), `consumerGroupReplication`],
    SourceKafkaClusterAlias: [, import_smithy_client.expectString, `sourceKafkaClusterAlias`],
    TargetCompressionType: [, import_smithy_client.expectString, `targetCompressionType`],
    TargetKafkaClusterAlias: [, import_smithy_client.expectString, `targetKafkaClusterAlias`],
    TopicReplication: [, (_) => de_TopicReplication(_, context), `topicReplication`]
  });
}, "de_ReplicationInfoDescription");
var de_ReplicationInfoSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    SourceKafkaClusterAlias: [, import_smithy_client.expectString, `sourceKafkaClusterAlias`],
    TargetKafkaClusterAlias: [, import_smithy_client.expectString, `targetKafkaClusterAlias`]
  });
}, "de_ReplicationInfoSummary");
var de_ReplicationStartingPosition = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Type: [, import_smithy_client.expectString, `type`]
  });
}, "de_ReplicationStartingPosition");
var de_ReplicationStateInfo = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Code: [, import_smithy_client.expectString, `code`],
    Message: [, import_smithy_client.expectString, `message`]
  });
}, "de_ReplicationStateInfo");
var de_ReplicationTopicNameConfiguration = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Type: [, import_smithy_client.expectString, `type`]
  });
}, "de_ReplicationTopicNameConfiguration");
var de_ReplicatorSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CreationTime: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `creationTime`],
    CurrentVersion: [, import_smithy_client.expectString, `currentVersion`],
    IsReplicatorReference: [, import_smithy_client.expectBoolean, `isReplicatorReference`],
    KafkaClustersSummary: [, (_) => de___listOfKafkaClusterSummary(_, context), `kafkaClustersSummary`],
    ReplicationInfoSummaryList: [
      ,
      (_) => de___listOfReplicationInfoSummary(_, context),
      `replicationInfoSummaryList`
    ],
    ReplicatorArn: [, import_smithy_client.expectString, `replicatorArn`],
    ReplicatorName: [, import_smithy_client.expectString, `replicatorName`],
    ReplicatorResourceArn: [, import_smithy_client.expectString, `replicatorResourceArn`],
    ReplicatorState: [, import_smithy_client.expectString, `replicatorState`]
  });
}, "de_ReplicatorSummary");
var de_S3 = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Bucket: [, import_smithy_client.expectString, `bucket`],
    Enabled: [, import_smithy_client.expectBoolean, `enabled`],
    Prefix: [, import_smithy_client.expectString, `prefix`]
  });
}, "de_S3");
var de_Sasl = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Iam: [, (_) => de_Iam(_, context), `iam`],
    Scram: [, (_) => de_Scram(_, context), `scram`]
  });
}, "de_Sasl");
var de_Scram = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Enabled: [, import_smithy_client.expectBoolean, `enabled`]
  });
}, "de_Scram");
var de_Serverless = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ClientAuthentication: [, (_) => de_ServerlessClientAuthentication(_, context), `clientAuthentication`],
    VpcConfigs: [, (_) => de___listOfVpcConfig(_, context), `vpcConfigs`]
  });
}, "de_Serverless");
var de_ServerlessClientAuthentication = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Sasl: [, (_) => de_ServerlessSasl(_, context), `sasl`]
  });
}, "de_ServerlessClientAuthentication");
var de_ServerlessSasl = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Iam: [, (_) => de_Iam(_, context), `iam`]
  });
}, "de_ServerlessSasl");
var de_StateInfo = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Code: [, import_smithy_client.expectString, `code`],
    Message: [, import_smithy_client.expectString, `message`]
  });
}, "de_StateInfo");
var de_StorageInfo = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    EbsStorageInfo: [, (_) => de_EBSStorageInfo(_, context), `ebsStorageInfo`]
  });
}, "de_StorageInfo");
var de_Tls = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CertificateAuthorityArnList: [, import_smithy_client._json, `certificateAuthorityArnList`],
    Enabled: [, import_smithy_client.expectBoolean, `enabled`]
  });
}, "de_Tls");
var de_TopicReplication = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CopyAccessControlListsForTopics: [, import_smithy_client.expectBoolean, `copyAccessControlListsForTopics`],
    CopyTopicConfigurations: [, import_smithy_client.expectBoolean, `copyTopicConfigurations`],
    DetectAndCopyNewTopics: [, import_smithy_client.expectBoolean, `detectAndCopyNewTopics`],
    StartingPosition: [, (_) => de_ReplicationStartingPosition(_, context), `startingPosition`],
    TopicNameConfiguration: [, (_) => de_ReplicationTopicNameConfiguration(_, context), `topicNameConfiguration`],
    TopicsToExclude: [, import_smithy_client._json, `topicsToExclude`],
    TopicsToReplicate: [, import_smithy_client._json, `topicsToReplicate`]
  });
}, "de_TopicReplication");
var de_Unauthenticated = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Enabled: [, import_smithy_client.expectBoolean, `enabled`]
  });
}, "de_Unauthenticated");
var de_UnprocessedScramSecret = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ErrorCode: [, import_smithy_client.expectString, `errorCode`],
    ErrorMessage: [, import_smithy_client.expectString, `errorMessage`],
    SecretArn: [, import_smithy_client.expectString, `secretArn`]
  });
}, "de_UnprocessedScramSecret");
var de_UserIdentity = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    PrincipalId: [, import_smithy_client.expectString, `principalId`],
    Type: [, import_smithy_client.expectString, `type`]
  });
}, "de_UserIdentity");
var de_VpcConfig = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    SecurityGroupIds: [, import_smithy_client._json, `securityGroupIds`],
    SubnetIds: [, import_smithy_client._json, `subnetIds`]
  });
}, "de_VpcConfig");
var de_VpcConnection = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Authentication: [, import_smithy_client.expectString, `authentication`],
    CreationTime: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `creationTime`],
    State: [, import_smithy_client.expectString, `state`],
    TargetClusterArn: [, import_smithy_client.expectString, `targetClusterArn`],
    VpcConnectionArn: [, import_smithy_client.expectString, `vpcConnectionArn`],
    VpcId: [, import_smithy_client.expectString, `vpcId`]
  });
}, "de_VpcConnection");
var de_VpcConnectionInfo = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CreationTime: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `creationTime`],
    Owner: [, import_smithy_client.expectString, `owner`],
    UserIdentity: [, (_) => de_UserIdentity(_, context), `userIdentity`],
    VpcConnectionArn: [, import_smithy_client.expectString, `vpcConnectionArn`]
  });
}, "de_VpcConnectionInfo");
var de_VpcConnectionInfoServerless = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CreationTime: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `creationTime`],
    Owner: [, import_smithy_client.expectString, `owner`],
    UserIdentity: [, (_) => de_UserIdentity(_, context), `userIdentity`],
    VpcConnectionArn: [, import_smithy_client.expectString, `vpcConnectionArn`]
  });
}, "de_VpcConnectionInfoServerless");
var de_VpcConnectivity = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ClientAuthentication: [, (_) => de_VpcConnectivityClientAuthentication(_, context), `clientAuthentication`]
  });
}, "de_VpcConnectivity");
var de_VpcConnectivityClientAuthentication = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Sasl: [, (_) => de_VpcConnectivitySasl(_, context), `sasl`],
    Tls: [, (_) => de_VpcConnectivityTls(_, context), `tls`]
  });
}, "de_VpcConnectivityClientAuthentication");
var de_VpcConnectivityIam = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Enabled: [, import_smithy_client.expectBoolean, `enabled`]
  });
}, "de_VpcConnectivityIam");
var de_VpcConnectivitySasl = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Iam: [, (_) => de_VpcConnectivityIam(_, context), `iam`],
    Scram: [, (_) => de_VpcConnectivityScram(_, context), `scram`]
  });
}, "de_VpcConnectivitySasl");
var de_VpcConnectivityScram = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Enabled: [, import_smithy_client.expectBoolean, `enabled`]
  });
}, "de_VpcConnectivityScram");
var de_VpcConnectivityTls = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Enabled: [, import_smithy_client.expectBoolean, `enabled`]
  });
}, "de_VpcConnectivityTls");
var de_ZookeeperNodeInfo = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AttachedENIId: [, import_smithy_client.expectString, `attachedENIId`],
    ClientVpcIpAddress: [, import_smithy_client.expectString, `clientVpcIpAddress`],
    Endpoints: [, import_smithy_client._json, `endpoints`],
    ZookeeperId: [, import_smithy_client.limitedParseDouble, `zookeeperId`],
    ZookeeperVersion: [, import_smithy_client.expectString, `zookeeperVersion`]
  });
}, "de_ZookeeperNodeInfo");
var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
}), "deserializeMetadata");
var _CA = "ClusterArn";
var _CNF = "ClusterNameFilter";
var _CTF = "ClusterTypeFilter";
var _CV = "CurrentVersion";
var _MR = "MaxResults";
var _NT = "NextToken";
var _RNF = "ReplicatorNameFilter";
var _TK = "TagKeys";
var _cA = "clusterArn";
var _cNF = "clusterNameFilter";
var _cTF = "clusterTypeFilter";
var _cV = "currentVersion";
var _mR = "maxResults";
var _nT = "nextToken";
var _rNF = "replicatorNameFilter";
var _tK = "tagKeys";

// src/commands/BatchAssociateScramSecretCommand.ts
var _BatchAssociateScramSecretCommand = class _BatchAssociateScramSecretCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "BatchAssociateScramSecret", {}).n("KafkaClient", "BatchAssociateScramSecretCommand").f(void 0, void 0).ser(se_BatchAssociateScramSecretCommand).de(de_BatchAssociateScramSecretCommand).build() {
};
__name(_BatchAssociateScramSecretCommand, "BatchAssociateScramSecretCommand");
var BatchAssociateScramSecretCommand = _BatchAssociateScramSecretCommand;

// src/commands/BatchDisassociateScramSecretCommand.ts



var _BatchDisassociateScramSecretCommand = class _BatchDisassociateScramSecretCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "BatchDisassociateScramSecret", {}).n("KafkaClient", "BatchDisassociateScramSecretCommand").f(void 0, void 0).ser(se_BatchDisassociateScramSecretCommand).de(de_BatchDisassociateScramSecretCommand).build() {
};
__name(_BatchDisassociateScramSecretCommand, "BatchDisassociateScramSecretCommand");
var BatchDisassociateScramSecretCommand = _BatchDisassociateScramSecretCommand;

// src/commands/CreateClusterCommand.ts



var _CreateClusterCommand = class _CreateClusterCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "CreateCluster", {}).n("KafkaClient", "CreateClusterCommand").f(void 0, void 0).ser(se_CreateClusterCommand).de(de_CreateClusterCommand).build() {
};
__name(_CreateClusterCommand, "CreateClusterCommand");
var CreateClusterCommand = _CreateClusterCommand;

// src/commands/CreateClusterV2Command.ts



var _CreateClusterV2Command = class _CreateClusterV2Command extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "CreateClusterV2", {}).n("KafkaClient", "CreateClusterV2Command").f(void 0, void 0).ser(se_CreateClusterV2Command).de(de_CreateClusterV2Command).build() {
};
__name(_CreateClusterV2Command, "CreateClusterV2Command");
var CreateClusterV2Command = _CreateClusterV2Command;

// src/commands/CreateConfigurationCommand.ts



var _CreateConfigurationCommand = class _CreateConfigurationCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "CreateConfiguration", {}).n("KafkaClient", "CreateConfigurationCommand").f(void 0, void 0).ser(se_CreateConfigurationCommand).de(de_CreateConfigurationCommand).build() {
};
__name(_CreateConfigurationCommand, "CreateConfigurationCommand");
var CreateConfigurationCommand = _CreateConfigurationCommand;

// src/commands/CreateReplicatorCommand.ts



var _CreateReplicatorCommand = class _CreateReplicatorCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "CreateReplicator", {}).n("KafkaClient", "CreateReplicatorCommand").f(void 0, void 0).ser(se_CreateReplicatorCommand).de(de_CreateReplicatorCommand).build() {
};
__name(_CreateReplicatorCommand, "CreateReplicatorCommand");
var CreateReplicatorCommand = _CreateReplicatorCommand;

// src/commands/CreateVpcConnectionCommand.ts



var _CreateVpcConnectionCommand = class _CreateVpcConnectionCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "CreateVpcConnection", {}).n("KafkaClient", "CreateVpcConnectionCommand").f(void 0, void 0).ser(se_CreateVpcConnectionCommand).de(de_CreateVpcConnectionCommand).build() {
};
__name(_CreateVpcConnectionCommand, "CreateVpcConnectionCommand");
var CreateVpcConnectionCommand = _CreateVpcConnectionCommand;

// src/commands/DeleteClusterCommand.ts



var _DeleteClusterCommand = class _DeleteClusterCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "DeleteCluster", {}).n("KafkaClient", "DeleteClusterCommand").f(void 0, void 0).ser(se_DeleteClusterCommand).de(de_DeleteClusterCommand).build() {
};
__name(_DeleteClusterCommand, "DeleteClusterCommand");
var DeleteClusterCommand = _DeleteClusterCommand;

// src/commands/DeleteClusterPolicyCommand.ts



var _DeleteClusterPolicyCommand = class _DeleteClusterPolicyCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "DeleteClusterPolicy", {}).n("KafkaClient", "DeleteClusterPolicyCommand").f(void 0, void 0).ser(se_DeleteClusterPolicyCommand).de(de_DeleteClusterPolicyCommand).build() {
};
__name(_DeleteClusterPolicyCommand, "DeleteClusterPolicyCommand");
var DeleteClusterPolicyCommand = _DeleteClusterPolicyCommand;

// src/commands/DeleteConfigurationCommand.ts



var _DeleteConfigurationCommand = class _DeleteConfigurationCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "DeleteConfiguration", {}).n("KafkaClient", "DeleteConfigurationCommand").f(void 0, void 0).ser(se_DeleteConfigurationCommand).de(de_DeleteConfigurationCommand).build() {
};
__name(_DeleteConfigurationCommand, "DeleteConfigurationCommand");
var DeleteConfigurationCommand = _DeleteConfigurationCommand;

// src/commands/DeleteReplicatorCommand.ts



var _DeleteReplicatorCommand = class _DeleteReplicatorCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "DeleteReplicator", {}).n("KafkaClient", "DeleteReplicatorCommand").f(void 0, void 0).ser(se_DeleteReplicatorCommand).de(de_DeleteReplicatorCommand).build() {
};
__name(_DeleteReplicatorCommand, "DeleteReplicatorCommand");
var DeleteReplicatorCommand = _DeleteReplicatorCommand;

// src/commands/DeleteVpcConnectionCommand.ts



var _DeleteVpcConnectionCommand = class _DeleteVpcConnectionCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "DeleteVpcConnection", {}).n("KafkaClient", "DeleteVpcConnectionCommand").f(void 0, void 0).ser(se_DeleteVpcConnectionCommand).de(de_DeleteVpcConnectionCommand).build() {
};
__name(_DeleteVpcConnectionCommand, "DeleteVpcConnectionCommand");
var DeleteVpcConnectionCommand = _DeleteVpcConnectionCommand;

// src/commands/DescribeClusterCommand.ts



var _DescribeClusterCommand = class _DescribeClusterCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "DescribeCluster", {}).n("KafkaClient", "DescribeClusterCommand").f(void 0, void 0).ser(se_DescribeClusterCommand).de(de_DescribeClusterCommand).build() {
};
__name(_DescribeClusterCommand, "DescribeClusterCommand");
var DescribeClusterCommand = _DescribeClusterCommand;

// src/commands/DescribeClusterOperationCommand.ts



var _DescribeClusterOperationCommand = class _DescribeClusterOperationCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "DescribeClusterOperation", {}).n("KafkaClient", "DescribeClusterOperationCommand").f(void 0, void 0).ser(se_DescribeClusterOperationCommand).de(de_DescribeClusterOperationCommand).build() {
};
__name(_DescribeClusterOperationCommand, "DescribeClusterOperationCommand");
var DescribeClusterOperationCommand = _DescribeClusterOperationCommand;

// src/commands/DescribeClusterOperationV2Command.ts



var _DescribeClusterOperationV2Command = class _DescribeClusterOperationV2Command extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "DescribeClusterOperationV2", {}).n("KafkaClient", "DescribeClusterOperationV2Command").f(void 0, void 0).ser(se_DescribeClusterOperationV2Command).de(de_DescribeClusterOperationV2Command).build() {
};
__name(_DescribeClusterOperationV2Command, "DescribeClusterOperationV2Command");
var DescribeClusterOperationV2Command = _DescribeClusterOperationV2Command;

// src/commands/DescribeClusterV2Command.ts



var _DescribeClusterV2Command = class _DescribeClusterV2Command extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "DescribeClusterV2", {}).n("KafkaClient", "DescribeClusterV2Command").f(void 0, void 0).ser(se_DescribeClusterV2Command).de(de_DescribeClusterV2Command).build() {
};
__name(_DescribeClusterV2Command, "DescribeClusterV2Command");
var DescribeClusterV2Command = _DescribeClusterV2Command;

// src/commands/DescribeConfigurationCommand.ts



var _DescribeConfigurationCommand = class _DescribeConfigurationCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "DescribeConfiguration", {}).n("KafkaClient", "DescribeConfigurationCommand").f(void 0, void 0).ser(se_DescribeConfigurationCommand).de(de_DescribeConfigurationCommand).build() {
};
__name(_DescribeConfigurationCommand, "DescribeConfigurationCommand");
var DescribeConfigurationCommand = _DescribeConfigurationCommand;

// src/commands/DescribeConfigurationRevisionCommand.ts



var _DescribeConfigurationRevisionCommand = class _DescribeConfigurationRevisionCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "DescribeConfigurationRevision", {}).n("KafkaClient", "DescribeConfigurationRevisionCommand").f(void 0, void 0).ser(se_DescribeConfigurationRevisionCommand).de(de_DescribeConfigurationRevisionCommand).build() {
};
__name(_DescribeConfigurationRevisionCommand, "DescribeConfigurationRevisionCommand");
var DescribeConfigurationRevisionCommand = _DescribeConfigurationRevisionCommand;

// src/commands/DescribeReplicatorCommand.ts



var _DescribeReplicatorCommand = class _DescribeReplicatorCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "DescribeReplicator", {}).n("KafkaClient", "DescribeReplicatorCommand").f(void 0, void 0).ser(se_DescribeReplicatorCommand).de(de_DescribeReplicatorCommand).build() {
};
__name(_DescribeReplicatorCommand, "DescribeReplicatorCommand");
var DescribeReplicatorCommand = _DescribeReplicatorCommand;

// src/commands/DescribeVpcConnectionCommand.ts



var _DescribeVpcConnectionCommand = class _DescribeVpcConnectionCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "DescribeVpcConnection", {}).n("KafkaClient", "DescribeVpcConnectionCommand").f(void 0, void 0).ser(se_DescribeVpcConnectionCommand).de(de_DescribeVpcConnectionCommand).build() {
};
__name(_DescribeVpcConnectionCommand, "DescribeVpcConnectionCommand");
var DescribeVpcConnectionCommand = _DescribeVpcConnectionCommand;

// src/commands/GetBootstrapBrokersCommand.ts



var _GetBootstrapBrokersCommand = class _GetBootstrapBrokersCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "GetBootstrapBrokers", {}).n("KafkaClient", "GetBootstrapBrokersCommand").f(void 0, void 0).ser(se_GetBootstrapBrokersCommand).de(de_GetBootstrapBrokersCommand).build() {
};
__name(_GetBootstrapBrokersCommand, "GetBootstrapBrokersCommand");
var GetBootstrapBrokersCommand = _GetBootstrapBrokersCommand;

// src/commands/GetClusterPolicyCommand.ts



var _GetClusterPolicyCommand = class _GetClusterPolicyCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "GetClusterPolicy", {}).n("KafkaClient", "GetClusterPolicyCommand").f(void 0, void 0).ser(se_GetClusterPolicyCommand).de(de_GetClusterPolicyCommand).build() {
};
__name(_GetClusterPolicyCommand, "GetClusterPolicyCommand");
var GetClusterPolicyCommand = _GetClusterPolicyCommand;

// src/commands/GetCompatibleKafkaVersionsCommand.ts



var _GetCompatibleKafkaVersionsCommand = class _GetCompatibleKafkaVersionsCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "GetCompatibleKafkaVersions", {}).n("KafkaClient", "GetCompatibleKafkaVersionsCommand").f(void 0, void 0).ser(se_GetCompatibleKafkaVersionsCommand).de(de_GetCompatibleKafkaVersionsCommand).build() {
};
__name(_GetCompatibleKafkaVersionsCommand, "GetCompatibleKafkaVersionsCommand");
var GetCompatibleKafkaVersionsCommand = _GetCompatibleKafkaVersionsCommand;

// src/commands/ListClientVpcConnectionsCommand.ts



var _ListClientVpcConnectionsCommand = class _ListClientVpcConnectionsCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "ListClientVpcConnections", {}).n("KafkaClient", "ListClientVpcConnectionsCommand").f(void 0, void 0).ser(se_ListClientVpcConnectionsCommand).de(de_ListClientVpcConnectionsCommand).build() {
};
__name(_ListClientVpcConnectionsCommand, "ListClientVpcConnectionsCommand");
var ListClientVpcConnectionsCommand = _ListClientVpcConnectionsCommand;

// src/commands/ListClusterOperationsCommand.ts



var _ListClusterOperationsCommand = class _ListClusterOperationsCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "ListClusterOperations", {}).n("KafkaClient", "ListClusterOperationsCommand").f(void 0, void 0).ser(se_ListClusterOperationsCommand).de(de_ListClusterOperationsCommand).build() {
};
__name(_ListClusterOperationsCommand, "ListClusterOperationsCommand");
var ListClusterOperationsCommand = _ListClusterOperationsCommand;

// src/commands/ListClusterOperationsV2Command.ts



var _ListClusterOperationsV2Command = class _ListClusterOperationsV2Command extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "ListClusterOperationsV2", {}).n("KafkaClient", "ListClusterOperationsV2Command").f(void 0, void 0).ser(se_ListClusterOperationsV2Command).de(de_ListClusterOperationsV2Command).build() {
};
__name(_ListClusterOperationsV2Command, "ListClusterOperationsV2Command");
var ListClusterOperationsV2Command = _ListClusterOperationsV2Command;

// src/commands/ListClustersCommand.ts



var _ListClustersCommand = class _ListClustersCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "ListClusters", {}).n("KafkaClient", "ListClustersCommand").f(void 0, void 0).ser(se_ListClustersCommand).de(de_ListClustersCommand).build() {
};
__name(_ListClustersCommand, "ListClustersCommand");
var ListClustersCommand = _ListClustersCommand;

// src/commands/ListClustersV2Command.ts



var _ListClustersV2Command = class _ListClustersV2Command extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "ListClustersV2", {}).n("KafkaClient", "ListClustersV2Command").f(void 0, void 0).ser(se_ListClustersV2Command).de(de_ListClustersV2Command).build() {
};
__name(_ListClustersV2Command, "ListClustersV2Command");
var ListClustersV2Command = _ListClustersV2Command;

// src/commands/ListConfigurationRevisionsCommand.ts



var _ListConfigurationRevisionsCommand = class _ListConfigurationRevisionsCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "ListConfigurationRevisions", {}).n("KafkaClient", "ListConfigurationRevisionsCommand").f(void 0, void 0).ser(se_ListConfigurationRevisionsCommand).de(de_ListConfigurationRevisionsCommand).build() {
};
__name(_ListConfigurationRevisionsCommand, "ListConfigurationRevisionsCommand");
var ListConfigurationRevisionsCommand = _ListConfigurationRevisionsCommand;

// src/commands/ListConfigurationsCommand.ts



var _ListConfigurationsCommand = class _ListConfigurationsCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "ListConfigurations", {}).n("KafkaClient", "ListConfigurationsCommand").f(void 0, void 0).ser(se_ListConfigurationsCommand).de(de_ListConfigurationsCommand).build() {
};
__name(_ListConfigurationsCommand, "ListConfigurationsCommand");
var ListConfigurationsCommand = _ListConfigurationsCommand;

// src/commands/ListKafkaVersionsCommand.ts



var _ListKafkaVersionsCommand = class _ListKafkaVersionsCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "ListKafkaVersions", {}).n("KafkaClient", "ListKafkaVersionsCommand").f(void 0, void 0).ser(se_ListKafkaVersionsCommand).de(de_ListKafkaVersionsCommand).build() {
};
__name(_ListKafkaVersionsCommand, "ListKafkaVersionsCommand");
var ListKafkaVersionsCommand = _ListKafkaVersionsCommand;

// src/commands/ListNodesCommand.ts



var _ListNodesCommand = class _ListNodesCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "ListNodes", {}).n("KafkaClient", "ListNodesCommand").f(void 0, void 0).ser(se_ListNodesCommand).de(de_ListNodesCommand).build() {
};
__name(_ListNodesCommand, "ListNodesCommand");
var ListNodesCommand = _ListNodesCommand;

// src/commands/ListReplicatorsCommand.ts



var _ListReplicatorsCommand = class _ListReplicatorsCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "ListReplicators", {}).n("KafkaClient", "ListReplicatorsCommand").f(void 0, void 0).ser(se_ListReplicatorsCommand).de(de_ListReplicatorsCommand).build() {
};
__name(_ListReplicatorsCommand, "ListReplicatorsCommand");
var ListReplicatorsCommand = _ListReplicatorsCommand;

// src/commands/ListScramSecretsCommand.ts



var _ListScramSecretsCommand = class _ListScramSecretsCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "ListScramSecrets", {}).n("KafkaClient", "ListScramSecretsCommand").f(void 0, void 0).ser(se_ListScramSecretsCommand).de(de_ListScramSecretsCommand).build() {
};
__name(_ListScramSecretsCommand, "ListScramSecretsCommand");
var ListScramSecretsCommand = _ListScramSecretsCommand;

// src/commands/ListTagsForResourceCommand.ts



var _ListTagsForResourceCommand = class _ListTagsForResourceCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "ListTagsForResource", {}).n("KafkaClient", "ListTagsForResourceCommand").f(void 0, void 0).ser(se_ListTagsForResourceCommand).de(de_ListTagsForResourceCommand).build() {
};
__name(_ListTagsForResourceCommand, "ListTagsForResourceCommand");
var ListTagsForResourceCommand = _ListTagsForResourceCommand;

// src/commands/ListVpcConnectionsCommand.ts



var _ListVpcConnectionsCommand = class _ListVpcConnectionsCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "ListVpcConnections", {}).n("KafkaClient", "ListVpcConnectionsCommand").f(void 0, void 0).ser(se_ListVpcConnectionsCommand).de(de_ListVpcConnectionsCommand).build() {
};
__name(_ListVpcConnectionsCommand, "ListVpcConnectionsCommand");
var ListVpcConnectionsCommand = _ListVpcConnectionsCommand;

// src/commands/PutClusterPolicyCommand.ts



var _PutClusterPolicyCommand = class _PutClusterPolicyCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "PutClusterPolicy", {}).n("KafkaClient", "PutClusterPolicyCommand").f(void 0, void 0).ser(se_PutClusterPolicyCommand).de(de_PutClusterPolicyCommand).build() {
};
__name(_PutClusterPolicyCommand, "PutClusterPolicyCommand");
var PutClusterPolicyCommand = _PutClusterPolicyCommand;

// src/commands/RebootBrokerCommand.ts



var _RebootBrokerCommand = class _RebootBrokerCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "RebootBroker", {}).n("KafkaClient", "RebootBrokerCommand").f(void 0, void 0).ser(se_RebootBrokerCommand).de(de_RebootBrokerCommand).build() {
};
__name(_RebootBrokerCommand, "RebootBrokerCommand");
var RebootBrokerCommand = _RebootBrokerCommand;

// src/commands/RejectClientVpcConnectionCommand.ts



var _RejectClientVpcConnectionCommand = class _RejectClientVpcConnectionCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "RejectClientVpcConnection", {}).n("KafkaClient", "RejectClientVpcConnectionCommand").f(void 0, void 0).ser(se_RejectClientVpcConnectionCommand).de(de_RejectClientVpcConnectionCommand).build() {
};
__name(_RejectClientVpcConnectionCommand, "RejectClientVpcConnectionCommand");
var RejectClientVpcConnectionCommand = _RejectClientVpcConnectionCommand;

// src/commands/TagResourceCommand.ts



var _TagResourceCommand = class _TagResourceCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "TagResource", {}).n("KafkaClient", "TagResourceCommand").f(void 0, void 0).ser(se_TagResourceCommand).de(de_TagResourceCommand).build() {
};
__name(_TagResourceCommand, "TagResourceCommand");
var TagResourceCommand = _TagResourceCommand;

// src/commands/UntagResourceCommand.ts



var _UntagResourceCommand = class _UntagResourceCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "UntagResource", {}).n("KafkaClient", "UntagResourceCommand").f(void 0, void 0).ser(se_UntagResourceCommand).de(de_UntagResourceCommand).build() {
};
__name(_UntagResourceCommand, "UntagResourceCommand");
var UntagResourceCommand = _UntagResourceCommand;

// src/commands/UpdateBrokerCountCommand.ts



var _UpdateBrokerCountCommand = class _UpdateBrokerCountCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "UpdateBrokerCount", {}).n("KafkaClient", "UpdateBrokerCountCommand").f(void 0, void 0).ser(se_UpdateBrokerCountCommand).de(de_UpdateBrokerCountCommand).build() {
};
__name(_UpdateBrokerCountCommand, "UpdateBrokerCountCommand");
var UpdateBrokerCountCommand = _UpdateBrokerCountCommand;

// src/commands/UpdateBrokerStorageCommand.ts



var _UpdateBrokerStorageCommand = class _UpdateBrokerStorageCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "UpdateBrokerStorage", {}).n("KafkaClient", "UpdateBrokerStorageCommand").f(void 0, void 0).ser(se_UpdateBrokerStorageCommand).de(de_UpdateBrokerStorageCommand).build() {
};
__name(_UpdateBrokerStorageCommand, "UpdateBrokerStorageCommand");
var UpdateBrokerStorageCommand = _UpdateBrokerStorageCommand;

// src/commands/UpdateBrokerTypeCommand.ts



var _UpdateBrokerTypeCommand = class _UpdateBrokerTypeCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "UpdateBrokerType", {}).n("KafkaClient", "UpdateBrokerTypeCommand").f(void 0, void 0).ser(se_UpdateBrokerTypeCommand).de(de_UpdateBrokerTypeCommand).build() {
};
__name(_UpdateBrokerTypeCommand, "UpdateBrokerTypeCommand");
var UpdateBrokerTypeCommand = _UpdateBrokerTypeCommand;

// src/commands/UpdateClusterConfigurationCommand.ts



var _UpdateClusterConfigurationCommand = class _UpdateClusterConfigurationCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "UpdateClusterConfiguration", {}).n("KafkaClient", "UpdateClusterConfigurationCommand").f(void 0, void 0).ser(se_UpdateClusterConfigurationCommand).de(de_UpdateClusterConfigurationCommand).build() {
};
__name(_UpdateClusterConfigurationCommand, "UpdateClusterConfigurationCommand");
var UpdateClusterConfigurationCommand = _UpdateClusterConfigurationCommand;

// src/commands/UpdateClusterKafkaVersionCommand.ts



var _UpdateClusterKafkaVersionCommand = class _UpdateClusterKafkaVersionCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "UpdateClusterKafkaVersion", {}).n("KafkaClient", "UpdateClusterKafkaVersionCommand").f(void 0, void 0).ser(se_UpdateClusterKafkaVersionCommand).de(de_UpdateClusterKafkaVersionCommand).build() {
};
__name(_UpdateClusterKafkaVersionCommand, "UpdateClusterKafkaVersionCommand");
var UpdateClusterKafkaVersionCommand = _UpdateClusterKafkaVersionCommand;

// src/commands/UpdateConfigurationCommand.ts



var _UpdateConfigurationCommand = class _UpdateConfigurationCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "UpdateConfiguration", {}).n("KafkaClient", "UpdateConfigurationCommand").f(void 0, void 0).ser(se_UpdateConfigurationCommand).de(de_UpdateConfigurationCommand).build() {
};
__name(_UpdateConfigurationCommand, "UpdateConfigurationCommand");
var UpdateConfigurationCommand = _UpdateConfigurationCommand;

// src/commands/UpdateConnectivityCommand.ts



var _UpdateConnectivityCommand = class _UpdateConnectivityCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "UpdateConnectivity", {}).n("KafkaClient", "UpdateConnectivityCommand").f(void 0, void 0).ser(se_UpdateConnectivityCommand).de(de_UpdateConnectivityCommand).build() {
};
__name(_UpdateConnectivityCommand, "UpdateConnectivityCommand");
var UpdateConnectivityCommand = _UpdateConnectivityCommand;

// src/commands/UpdateMonitoringCommand.ts



var _UpdateMonitoringCommand = class _UpdateMonitoringCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "UpdateMonitoring", {}).n("KafkaClient", "UpdateMonitoringCommand").f(void 0, void 0).ser(se_UpdateMonitoringCommand).de(de_UpdateMonitoringCommand).build() {
};
__name(_UpdateMonitoringCommand, "UpdateMonitoringCommand");
var UpdateMonitoringCommand = _UpdateMonitoringCommand;

// src/commands/UpdateReplicationInfoCommand.ts



var _UpdateReplicationInfoCommand = class _UpdateReplicationInfoCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "UpdateReplicationInfo", {}).n("KafkaClient", "UpdateReplicationInfoCommand").f(void 0, void 0).ser(se_UpdateReplicationInfoCommand).de(de_UpdateReplicationInfoCommand).build() {
};
__name(_UpdateReplicationInfoCommand, "UpdateReplicationInfoCommand");
var UpdateReplicationInfoCommand = _UpdateReplicationInfoCommand;

// src/commands/UpdateSecurityCommand.ts



var _UpdateSecurityCommand = class _UpdateSecurityCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "UpdateSecurity", {}).n("KafkaClient", "UpdateSecurityCommand").f(void 0, void 0).ser(se_UpdateSecurityCommand).de(de_UpdateSecurityCommand).build() {
};
__name(_UpdateSecurityCommand, "UpdateSecurityCommand");
var UpdateSecurityCommand = _UpdateSecurityCommand;

// src/commands/UpdateStorageCommand.ts



var _UpdateStorageCommand = class _UpdateStorageCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("Kafka", "UpdateStorage", {}).n("KafkaClient", "UpdateStorageCommand").f(void 0, void 0).ser(se_UpdateStorageCommand).de(de_UpdateStorageCommand).build() {
};
__name(_UpdateStorageCommand, "UpdateStorageCommand");
var UpdateStorageCommand = _UpdateStorageCommand;

// src/Kafka.ts
var commands = {
  BatchAssociateScramSecretCommand,
  BatchDisassociateScramSecretCommand,
  CreateClusterCommand,
  CreateClusterV2Command,
  CreateConfigurationCommand,
  CreateReplicatorCommand,
  CreateVpcConnectionCommand,
  DeleteClusterCommand,
  DeleteClusterPolicyCommand,
  DeleteConfigurationCommand,
  DeleteReplicatorCommand,
  DeleteVpcConnectionCommand,
  DescribeClusterCommand,
  DescribeClusterOperationCommand,
  DescribeClusterOperationV2Command,
  DescribeClusterV2Command,
  DescribeConfigurationCommand,
  DescribeConfigurationRevisionCommand,
  DescribeReplicatorCommand,
  DescribeVpcConnectionCommand,
  GetBootstrapBrokersCommand,
  GetClusterPolicyCommand,
  GetCompatibleKafkaVersionsCommand,
  ListClientVpcConnectionsCommand,
  ListClusterOperationsCommand,
  ListClusterOperationsV2Command,
  ListClustersCommand,
  ListClustersV2Command,
  ListConfigurationRevisionsCommand,
  ListConfigurationsCommand,
  ListKafkaVersionsCommand,
  ListNodesCommand,
  ListReplicatorsCommand,
  ListScramSecretsCommand,
  ListTagsForResourceCommand,
  ListVpcConnectionsCommand,
  PutClusterPolicyCommand,
  RebootBrokerCommand,
  RejectClientVpcConnectionCommand,
  TagResourceCommand,
  UntagResourceCommand,
  UpdateBrokerCountCommand,
  UpdateBrokerStorageCommand,
  UpdateBrokerTypeCommand,
  UpdateClusterConfigurationCommand,
  UpdateClusterKafkaVersionCommand,
  UpdateConfigurationCommand,
  UpdateConnectivityCommand,
  UpdateMonitoringCommand,
  UpdateReplicationInfoCommand,
  UpdateSecurityCommand,
  UpdateStorageCommand
};
var _Kafka = class _Kafka extends KafkaClient {
};
__name(_Kafka, "Kafka");
var Kafka = _Kafka;
(0, import_smithy_client.createAggregatedClient)(commands, Kafka);

// src/pagination/ListClientVpcConnectionsPaginator.ts

var paginateListClientVpcConnections = (0, import_core.createPaginator)(KafkaClient, ListClientVpcConnectionsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListClusterOperationsPaginator.ts

var paginateListClusterOperations = (0, import_core.createPaginator)(KafkaClient, ListClusterOperationsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListClusterOperationsV2Paginator.ts

var paginateListClusterOperationsV2 = (0, import_core.createPaginator)(KafkaClient, ListClusterOperationsV2Command, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListClustersPaginator.ts

var paginateListClusters = (0, import_core.createPaginator)(KafkaClient, ListClustersCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListClustersV2Paginator.ts

var paginateListClustersV2 = (0, import_core.createPaginator)(KafkaClient, ListClustersV2Command, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListConfigurationRevisionsPaginator.ts

var paginateListConfigurationRevisions = (0, import_core.createPaginator)(KafkaClient, ListConfigurationRevisionsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListConfigurationsPaginator.ts

var paginateListConfigurations = (0, import_core.createPaginator)(KafkaClient, ListConfigurationsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListKafkaVersionsPaginator.ts

var paginateListKafkaVersions = (0, import_core.createPaginator)(KafkaClient, ListKafkaVersionsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListNodesPaginator.ts

var paginateListNodes = (0, import_core.createPaginator)(KafkaClient, ListNodesCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListReplicatorsPaginator.ts

var paginateListReplicators = (0, import_core.createPaginator)(KafkaClient, ListReplicatorsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListScramSecretsPaginator.ts

var paginateListScramSecrets = (0, import_core.createPaginator)(KafkaClient, ListScramSecretsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListVpcConnectionsPaginator.ts

var paginateListVpcConnections = (0, import_core.createPaginator)(KafkaClient, ListVpcConnectionsCommand, "NextToken", "NextToken", "MaxResults");
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  KafkaServiceException,
  __Client,
  KafkaClient,
  Kafka,
  $Command,
  BatchAssociateScramSecretCommand,
  BatchDisassociateScramSecretCommand,
  CreateClusterCommand,
  CreateClusterV2Command,
  CreateConfigurationCommand,
  CreateReplicatorCommand,
  CreateVpcConnectionCommand,
  DeleteClusterCommand,
  DeleteClusterPolicyCommand,
  DeleteConfigurationCommand,
  DeleteReplicatorCommand,
  DeleteVpcConnectionCommand,
  DescribeClusterCommand,
  DescribeClusterOperationCommand,
  DescribeClusterOperationV2Command,
  DescribeClusterV2Command,
  DescribeConfigurationCommand,
  DescribeConfigurationRevisionCommand,
  DescribeReplicatorCommand,
  DescribeVpcConnectionCommand,
  GetBootstrapBrokersCommand,
  GetClusterPolicyCommand,
  GetCompatibleKafkaVersionsCommand,
  ListClientVpcConnectionsCommand,
  ListClusterOperationsCommand,
  ListClusterOperationsV2Command,
  ListClustersCommand,
  ListClustersV2Command,
  ListConfigurationRevisionsCommand,
  ListConfigurationsCommand,
  ListKafkaVersionsCommand,
  ListNodesCommand,
  ListReplicatorsCommand,
  ListScramSecretsCommand,
  ListTagsForResourceCommand,
  ListVpcConnectionsCommand,
  PutClusterPolicyCommand,
  RebootBrokerCommand,
  RejectClientVpcConnectionCommand,
  TagResourceCommand,
  UntagResourceCommand,
  UpdateBrokerCountCommand,
  UpdateBrokerStorageCommand,
  UpdateBrokerTypeCommand,
  UpdateClusterConfigurationCommand,
  UpdateClusterKafkaVersionCommand,
  UpdateConfigurationCommand,
  UpdateConnectivityCommand,
  UpdateMonitoringCommand,
  UpdateReplicationInfoCommand,
  UpdateSecurityCommand,
  UpdateStorageCommand,
  paginateListClientVpcConnections,
  paginateListClusterOperations,
  paginateListClusterOperationsV2,
  paginateListClusters,
  paginateListClustersV2,
  paginateListConfigurationRevisions,
  paginateListConfigurations,
  paginateListKafkaVersions,
  paginateListNodes,
  paginateListReplicators,
  paginateListScramSecrets,
  paginateListVpcConnections,
  VpcConnectionState,
  ClusterType,
  BrokerAZDistribution,
  CustomerActionStatus,
  ClientBroker,
  EnhancedMonitoring,
  StorageMode,
  ClusterState,
  UserIdentityType,
  ConfigurationState,
  KafkaVersionStatus,
  NodeType,
  TargetCompressionType,
  ReplicationStartingPositionType,
  ReplicationTopicNameConfigurationType,
  ReplicatorState,
  BadRequestException,
  ForbiddenException,
  InternalServerErrorException,
  NotFoundException,
  ServiceUnavailableException,
  TooManyRequestsException,
  UnauthorizedException,
  ConflictException
});

